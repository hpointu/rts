{"version":3,"sources":["hpointu/rts/core.cljs"],"mappings":"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","names":["p__47191","p__47192","vec__47193","cljs.core.nth","vec__47196","hpointu.rts.core/distance","x1","y1","x2","y2","dx","js/Math.abs","dy","js/Math.sqrt","hpointu.rts.core/normalize","v","l","cljs.core.into","cljs.core//","cljs.core.map","hpointu.rts.core/world-width","world","cljs.core/count","cljs.core.get","hpointu.rts.core/world-height","hpointu.rts.core/->world","width","height","full","cljs.core/vec","iter__4529__auto__","s__47208","cljs.core/LazySeq","temp__5735__auto__","cljs.core/seq","cljs.core/chunked-seq?","c__4527__auto__","size__4528__auto__","b__47210","cljs.core/chunk-buffer","i__47209","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__47207","cljs.core/chunk-rest","cljs.core/first","cljs.core/cons","cljs.core/rest","_","cljs.core.range","line","s__47212","b__47214","i__47213","iter__47211","cljs.core.conj","s__47216","b__47218","i__47217","iter__47215","hpointu.rts.core/world-cell","x","y","cljs.core.get_in","hpointu.rts.core/set-world-cell","cljs.core/assoc-in","hpointu.rts.core/obstacle?","obstacles","G__47227","hpointu.rts.core/cost","from","to","vec__47228","var_args","G__47232","hpointu.rts.core/in-world?","js/Error","p__47237","vec__47238","hpointu.rts.core.in_world_QMARK_","p__47242","vec__47243","hpointu.rts.core/neighbours","p1__47241#","cljs.core.filter","hpointu.rts.core/->unit","hpointu.rts.core/add-waypoint","unit","cljs.core.update","cljs.core/conj","p__47253","map__47254","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","hpointu.rts.core/walk","waypoints","dt","p__47256","map__47257","hpointu.rts.core/arrived?","dest","vec__47263","vec__47266","vec__47269","speed","wp","cljs.core/-","cljs.core/*","vec__47273","cljs.core.assoc","p1__47250#","cljs.core/+","cljs.core/chunk-first"],"sourcesContent":["(ns hpointu.rts.core)\n\n(defn distance [[x1 y1] [x2 y2]]\n  (let [dx (js/Math.abs (- x2 x1))\n        dy (js/Math.abs (- y2 y1))]\n    (js/Math.sqrt (+ (* dx dx) (* dy dy)))))\n\n(defn normalize [v]\n  (let [l (distance [0 0] v)]\n    (into [] (map / v [l l]))))\n\n(defn world-width [world]\n  (count (get world 0)))\n\n(defn world-height [world]\n  (count world))\n\n(defn ->world [width height]\n  (let [full (vec (for [_ (range width)] :w))\n        line (-> [:w]\n                 (into (for [_ (range (- width 2))] :g))\n                 (conj :w))]\n    (-> [full]\n        (into (for [_ (range (- height 2))] line))\n        (conj full)))) \n\n\n(defn world-cell [world x y]\n  (get-in world [y x]))\n\n\n(defn set-world-cell [world x y v]\n  (assoc-in world [y x] v))\n\n\n(defn obstacle? [world x y]\n  (let [obstacles #{:w}]\n    (some? (obstacles (get-in world [y x])))))\n\n\n(defn cost [world from to]\n  (let [[x1 y1] to]\n    (if (obstacle? world x1 y1)\n      99999\n      (distance from to))))\n\n\n(defn in-world?\n\n  ([world [x y]]\n   (in-world? world x y))\n\n  ([world x y]\n   (and (< -1 x (world-width world))\n        (< -1 y (world-height world)))))\n\n\n(defn neighbours [world [x y]]\n  (filter\n    #(in-world? world %)\n    [[(dec x) (dec y)] [x (dec y)] [(inc x) (dec y)]\n     [(dec x) y]                   [(inc x) y]\n     [(dec x) (inc y)] [x (inc y)] [(inc x) (inc y)]]))\n\n\n(defn ->unit [x y]\n  {:x x\n   :y y\n   :waypoints []\n   :selected? false})\n\n\n(defn add-waypoint [unit x y]\n  (update unit :waypoints conj [x y]))\n\n\n(defn walk [{:keys [x y waypoints] :as unit} dt]\n\n  (defn arrived? [{:keys [x y] :as unit} dest]\n    (< (distance [x y] dest) 0.05))\n\n  (let [speed 3\n        dt (/ dt 1000)\n        wp (first waypoints)\n        [dx dy] (normalize (map - wp [x y]))\n        [dx dy] (map * [speed speed] [dx dy])\n        [dx dy] (map * [dt dt] [dx dy])]\n    (if (arrived? unit wp)\n      (let [[x y] wp]\n        (-> unit\n            (assoc :x x :y y)  ; start from round values\n            (update :waypoints #(-> % rest vec))))\n      (-> unit\n          (update :x + dx)\n          (update :y + dy)))))\n"]}