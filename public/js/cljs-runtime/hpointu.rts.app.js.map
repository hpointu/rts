{"version":3,"sources":["hpointu/rts/app.cljs"],"mappings":"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","names":["hpointu.rts.app/current-time","cljs.core.atom","js/hpointu","js/hpointu.rts","js/hpointu.rts.app","js/hpointu.rts.app.state","hpointu.rts.app/state","reagent.core.atom","js/hpointu.rts.app.frame-counter","hpointu.rts.app/frame-counter","js/hpointu.rts.app.fps","hpointu.rts.app/fps","hpointu.rts.app/SIZE","hpointu.rts.app/init-state","hpointu.rts.core/->world","p__91619","map__91620","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","cljs.core.get","hpointu.rts.app/visible?","camera","x","y","vec__91622","cljs.core.nth","cx","cy","p__91625","vec__91626","hpointu.rts.app/visible-range","iter__4529__auto__","s__91630","cljs.core/LazySeq","temp__5735__auto__","cljs.core/seq","xs__6292__auto__","cljs.core/first","iterys__4525__auto__","s__91632","cljs.core/chunked-seq?","c__4527__auto__","size__4528__auto__","cljs.core/count","b__91634","cljs.core/chunk-buffer","i__91633","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__91631","cljs.core/chunk-rest","cljs.core/cons","cljs.core/rest","fs__4526__auto__","cljs.core.concat","iter__91629","cljs.core.range","p__91635","map__91636","hpointu.rts.app/hover?","hover","cljs.core._EQ_","p__91638","vec__91639","hpointu.rts.app/cell-redraw","p__91642","map__91643","hpointu.rts.app/redraw-world","world","state","elems","s__91646","s__91648","b__91650","i__91649","iter__91647","iter__91645","hpointu.rts.core/world-width","hpointu.rts.core/world-height","cljs.core.update","cljs.core/conj","cljs.core/into","p__91651","map__91652","hpointu.rts.app/redraw-visible","s__91655","b__91657","i__91656","vec__91658","iter__91654","vec__91661","p__91664","p__91665","map__91666","vec__91667","hpointu.rts.app/to-game-canvas","vec__91671","cljs.core.into","cljs.core.map","cljs.core/int","p__91674","vec__91675","hpointu.rts.app/to-minimap-canvas","size","p__91678","vec__91679","hpointu.rts.app/to-world","hpointu.rts.app/get-game-canvas","js/document.getElementById","hpointu.rts.app/get-minimap-canvas","hpointu.rts.app/context","canvas-name","p__91682","map__91683","hpointu.rts.app/draw-tile!","ctx","vec__91685","tile-color","hpointu.rts.core/obstacle?","hpointu.rts.graphics/render-item!","p__91688","map__91689","hpointu.rts.app/update-hover","vec__91691","new-hover","hpointu.rts.core/in-world?","cljs.core.assoc","cljs.core.keep","cljs.core/identity","p__91694","map__91695","hpointu.rts.app/add-wall","vec__91697","hpointu.rts.core/set-world-cell","p__91700","map__91701","hpointu.rts.app/clamp-camera","max-x","max-y","round","f","js/Math.round","fixed","cljs.core.update_in","cljs.core/min","cljs.core/max","hpointu.rts.app/move-camera","dx","dy","speed","cljs.core/+","p__91703","map__91704","hpointu.rts.app/handle-keys","G__91706","and__4115__auto__","hpointu.rts.input/key-pressed?","cljs.core/some","p__91707","map__91708","hpointu.rts.app/update-state","dt","vec__91710","canvas","cljs.core.comp","hpointu.rts.input/mouse-pos","p__91713","vec__91714","seq__91715","first__91716","cljs.core/next","hpointu.rts.app/draw-game-elem!","update-type","args","vec__91717","p__91720","p__91721","map__91722","vec__91723","seq__91724","first__91725","hpointu.rts.app/draw-minimap-elem!","vec__91727","vec__91730","color","p__91733","map__91734","hpointu.rts.app/draw!","world-updates","seq__91736","chunk__91737","count__91738","i__91739","c__4556__auto__","cljs.core/chunk-first","wu","vec__91740","hpointu.rts.app/tick!","t","js/Date","cljs.core/deref","new-state","cljs.core/reset!","cljs.core.swap_BANG_","cljs.core/inc","hpointu.rts.app/get-debug-content","hpointu.rts.input/keymap","sb__4667__auto__","goog.string/StringBuffer","*print-newline*-orig-val__91747","cljs.core/*print-newline*","*print-fn*-orig-val__91748","cljs.core/*print-fn*","*print-newline*-temp-val__91749","*print-fn*-temp-val__91750","x__4668__auto__","cljs.pprint.pprint","cljs.core.dissoc","p1__91751#","hpointu.rts.app/rts-app","props","hpointu.rts.app/timers","hpointu.rts.app/stop","seq__91752","chunk__91753","count__91754","i__91755","js/clearInterval","cljs.core.println","hpointu.rts.app/start","reagent.dom.render","js/setInterval","hpointu.rts.app/init","hpointu.rts.input/init!"],"sourcesContent":["(ns hpointu.rts.app\n  (:require [hpointu.rts.graphics :as g]\n            [hpointu.rts.input :as io]\n            [hpointu.rts.core :as core]\n            [reagent.core :as r]\n            [reagent.dom :as rdom]\n            [cljs.pprint]))\n\n\n(def current-time (atom 0))\n(defonce state (r/atom {}))\n\n;; hack for FPS counter\n(defonce frame-counter (atom 0))\n(defonce fps (r/atom 0))\n\n(def SIZE 35)\n(defn init-state []\n  {:world (core/->world 74 74)\n   :camera [0 0]\n   :world-updates []})\n\n(defn visible? [{:keys [camera]} x y]\n  (let [[cx cy] camera]\n    (and (< x (+ cx 18))\n         (< y (+ cy 14)))))\n\n(defn visible-range [[cx cy :as camera]]\n  (for [x (range (int (- cx 2)) (int (+ cx 18 2)))\n        y (range (int (- cy 2)) (int (+ cy 14 2)))]\n    [x y]))\n\n(defn hover? [{:keys [hover]} x y]\n  (= hover [x y]))\n\n(defn cell-redraw [[x y]]\n  [:cell x y])\n\n(defn redraw-world [{:keys [world] :as state}]\n  (let [elems (for [x (range (core/world-width world))\n                    y (range (core/world-height world))]\n                (cell-redraw [x y]))]\n    (-> state\n        (update :world-updates conj [:clear])\n        (update :world-updates into elems))))\n\n(defn redraw-visible [{:keys [world camera] :as state}]\n  (let [elems (for [[x y] (visible-range camera)]\n                (cell-redraw [x y]))]\n    (-> state\n        (update :world-updates conj [:clear])\n        (update :world-updates into elems))))\n\n(defn to-game-canvas [{:keys [camera]} [x y]]\n  (let [[cx cy] camera]\n    (into [] (map int [(* SIZE (- x cx)) (* SIZE (- y cy))]))))\n\n(defn to-minimap-canvas [[x y] size]\n  [(* size x) (* size y)])\n\n(defn to-world [[x y]]\n  [(/ x SIZE) (/ y SIZE)])\n\n(defn get-game-canvas []\n  (js/document.getElementById \"game\"))\n\n(defn get-minimap-canvas []\n  (js/document.getElementById \"minimap\"))\n\n(defn context [canvas-name]\n  (.getContext (js/document.getElementById canvas-name) \"2d\"))\n\n(defn draw-tile! [ctx {:keys [world] :as state} x y size]\n  (let [tile-color (cond\n                     (core/obstacle? world x y) \"gray\"\n                     (hover? state x y) \"green\"\n                     :else \"#222\")\n        [x y] (to-game-canvas state [x y])]\n    (g/render-item! ctx {:type :rect :x (+ 1 x) :y (+ 1 y)\n                         :w (- size 2) :h (- size 2) :fill tile-color})\n    (g/render-item! ctx {:type :rect :x (+ 2 x) :y (+ 2 y)\n                         :w (- size 4) :h (- size 4) :fill \"black\"})))\n\n(defn update-hover [{:keys [hover world camera] :as state} x y]\n  (let [[cx cy] camera\n        new-hover (when (core/in-world? world x y) [x y])]\n    (-> state\n        (assoc :hover new-hover)\n        (update :world-updates into (map cell-redraw (keep identity [new-hover hover]))))))\n\n(defn add-wall [{:keys [hover] :as state}]\n  (let [[x y] hover]\n    (update state :world core/set-world-cell x y :w)))\n\n(defn clamp-camera [{:keys [world] :as state}]\n  (let [max-x (- (core/world-width world) 17.4)\n        max-y (- (core/world-height world) 13.6)\n        round (fn [f] (/ (js/Math.round (* 10 f)) 10))\n        fixed (fn [camera] (into [] (map round camera)))]\n    (-> state\n      (update-in [:camera 0] min max-x)\n      (update-in [:camera 0] max 0)\n      (update-in [:camera 1] min max-y)\n      (update-in [:camera 1] max 0)\n      (update :camera fixed))))\n\n(defn move-camera [state dx dy]\n  (let [speed 0.3]\n    (-> state\n        (update-in [:camera 0] + (* speed dx))\n        (update-in [:camera 1] + (* speed dy))\n        (clamp-camera)\n        (redraw-visible))))\n\n(defn handle-keys [{:keys [hover] :as state}]\n  (cond-> state\n    ;; Pressing W\n    (and hover (io/key-pressed? \"KeyW\"))\n    (add-wall)\n    ;; Pressing arrows\n    (some io/key-pressed? #{\"ArrowLeft\" \"ArrowRight\" \"ArrowUp\" \"ArrowDown\"})\n    (move-camera (cond (io/key-pressed? \"ArrowLeft\") -1\n                       (io/key-pressed? \"ArrowRight\") 1\n                       :else 0)\n                 (cond (io/key-pressed? \"ArrowUp\") -1\n                      (io/key-pressed? \"ArrowDown\") 1\n                      :else 0))))\n   \n(defn update-state [{:keys [world camera] :as state} dt] state\n  (let [canvas (get-game-canvas)\n        [x y] (map (comp int +) camera (to-world (io/mouse-pos canvas)))]\n    (-> state\n        (update-hover x y)\n        (handle-keys))))\n\n\n(defn draw-game-elem! [state [update-type & args]]\n  (cond (= update-type :cell)\n        (let [[x y] args]\n          (when (visible? state x y)\n            (draw-tile! (context \"game\") state x y SIZE)))\n        (= update-type :clear)\n        (let [canvas (get-game-canvas)]\n          (.clearRect (context \"game\") 0 0 (.-width canvas) (.-height canvas)))))\n    \n(defn draw-minimap-elem! [{:keys [world] :as state} [update-type & args]]\n  (cond (= update-type :cell)\n        (let [size 3\n              [x y] args\n              color (if (core/obstacle? world x y) \"gray\" \"#111\")\n              [x y] (to-minimap-canvas args size)]\n          (g/render-item! (context \"minimap\") {:type :rect :x x :y y\n                                               :w size :h size :fill color}))))\n \n(defn draw! [{:keys [world-updates world] :as state}]\n  (doseq [wu world-updates]\n    (draw-game-elem! state wu)\n    (draw-minimap-elem! state wu))\n  (let [[cx cy] (:camera state)]\n    (g/render-item! (context \"minimap\") {:type :box :x (* 3 cx) :y (* 3 cy)\n                                         :w 53 :h 42 :color \"white\"}))\n  (assoc state :world-updates []))\n\n(defn tick! []\n  (let [t (.now js/Date)\n        dt (- t @current-time)\n        new-state (draw! (update-state @state dt))]\n    (do (reset! current-time t)\n        (reset! state new-state)\n        (swap! frame-counter inc))))\n\n(defn get-debug-content []\n  (str \"FPS: \" @fps \" - \" @io/keymap \"\\n\"\n       (with-out-str (cljs.pprint/pprint (-> @state (dissoc :world)\n                                             (dissoc :world-updates))))))\n(defn rts-app [props]\n  [:div {:style {:color \"white\"}}\n   [:h2 {:style {:margin \"0 0 5px 0\"\n                 :padding 10\n                 :width 820\n                 :background-color \"black\"}}\n    \"RTS Demo\" [:span {:style {:font-size \"0.7em\"\n                               :font-family \"mono\"\n                               :color \"red\"\n                               :margin-left 90}}\n                \"- Press W on the map to place a wall\"]]\n   [:div {:style {:display \"flex\"}}\n     [:div {:style {:width 223\n                    :margin-right 5\n                    :display \"flex\"\n                    :flex-flow \"column wrap\"}}\n      [:canvas {:id \"minimap\"\n                :width 223\n                :height 223\n                :style {:background-color \"#111\" :width 223 :height 223}}]\n      [:div {:style {:background-color \"black\"\n                     :font-family \"mono\"\n                     :flex-grow 1\n                     :padding 15 :margin-top 5}}\n       [:h4 {:style {:margin 0}} \"TODO:\"]\n       [:ul {:style {:font-size \"0.8em\" :margin 0 :padding-left 20}}\n        [:li {:style {:text-decoration \"line-through\" :color \"#888\"}} \"Minimap\"]\n        [:li {:style {:text-decoration \"line-through\" :color \"#888\"}} \"Camera movement\"]\n        [:li {:style {:text-decoration \"initial\"}} \"Mouse mode\"]\n        [:li {:style {:text-decoration \"initial\"}} \"Entities\"]\n        [:li {:style {:text-decoration \"initial\"}} \"Path finding\"]\n        [:li {:style {:text-decoration \"initial\"}} \"Gameplay elements\"]]]]\n     [:canvas {:id \"game\" :width 611 :height 480\n               :onContextMenu #(.preventDefault %)\n               :style {:background-color \"black\"\n                       :min-width 611\n                       :margin 0}}]]\n   [:pre {:style {:background-color \"black\"\n                  :margin-top 5\n                  :padding 10\n                  :width 820}}\n    (get-debug-content)]])\n\n(def timers (atom []))\n;(reset! state (init-state))\n(defn ^:dev/before-load stop []\n  (doseq [t @timers]\n    (js/clearInterval t))\n  (println \"Stopping...\"))\n\n(defn ^:dev/after-load start []\n  (println (str \"Starting...\"))\n  (swap! state redraw-world)\n  (rdom/render [rts-app] (js/document.getElementById \"app\"))\n  (swap! timers conj (js/setInterval tick! 16.66))\n  (swap! timers conj (js/setInterval\n                      #(do \n                         (reset! fps @frame-counter)\n                         (reset! frame-counter 0))\n                      1000)))\n\n(defn ^:export init []\n  (println \"Initializing...\")\n  (reset! state (init-state))\n  (start)\n  (io/init!))\n\n"]}