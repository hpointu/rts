{"version":3,"sources":["hpointu/rts/app.cljs"],"mappings":"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","names":["hpointu.rts.app/current-time","cljs.core.atom","js/hpointu","js/hpointu.rts","js/hpointu.rts.app","js/hpointu.rts.app.state","hpointu.rts.app/state","hpointu.rts.app/SIZE","hpointu.rts.app/init-state","hpointu.rts.core/->world","p__33028","vec__33029","cljs.core.nth","hpointu.rts.app/to-screen","x","y","p__33032","vec__33033","hpointu.rts.app/to-world","hpointu.rts.app/get-canvas","js/document.getElementById","hpointu.rts.app/draw-tile!","ctx","world","size","hover?","vec__33036","tile-color","hpointu.rts.core/obstacle?","hpointu.rts.graphics/render-item!","p__33039","map__33040","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","cljs.core.get","hpointu.rts.app/draw-map!","hover","state","seq__33042","cljs.core/seq","chunk__33047","count__33048","i__33049","seq__33050","chunk__33051","count__33052","i__33053","temp__5735__auto__","cljs.core/chunked-seq?","c__4556__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/count","cljs.core/first","cljs.core/next","seq__33043","chunk__33044","count__33045","i__33046","cljs.core.range","hpointu.rts.core/world-width","hpointu.rts.core/world-height","cljs.core._EQ_","hpointu.rts.app/update-state","dt","canvas","cljs.core.assoc","cljs.core.into","cljs.core.map","cljs.core/int","hpointu.rts.input/mouse-pos","hpointu.rts.app/draw!","hpointu.rts.app/tick!","t","js/Date","cljs.core/deref","new-state","cljs.core/reset!","hpointu.rts.app/stop","cljs.core.println","hpointu.rts.app/start","hpointu.rts.app/init","js/setInterval","hpointu.rts.input/init!"],"sourcesContent":["(ns hpointu.rts.app\n  (:require [hpointu.rts.graphics :as g]\n            [hpointu.rts.input :as io]\n            [hpointu.rts.core :as core]))\n\n(def current-time (atom 0))\n(defonce state (atom {}))\n\n(def SIZE 35)\n(defn init-state []\n  {:world (core/->world 15 10)})\n\n(defn to-screen [[x y]]\n  [(* SIZE x) (* SIZE y)])\n\n(defn to-world [[x y]]\n  [(/ x SIZE) (/ y SIZE)])\n\n(defn get-canvas []\n  (js/document.getElementById \"game\"))\n\n(defn draw-tile! [ctx world x y size hover?]\n  (let [tile-color (if (core/obstacle? world x y) \"gray\" (if hover? \"green\" \"#222\"))\n        [x y] (to-screen [x y])]\n    (g/render-item! ctx {:type :rect :x (+ 1 x) :y (+ 1 y)\n                         :w (- size 2) :h (- size 2) :fill tile-color})\n    (g/render-item! ctx {:type :rect :x (+ 2 x) :y (+ 2 y)\n                         :w (- size 4) :h (- size 4) :fill \"black\"})))\n\n(defn draw-map! [ctx {:keys [world hover] :as state}]\n  (doseq [x (range (core/world-width world))\n          y (range (core/world-height world))]\n    (draw-tile! ctx world x y SIZE (= hover [x y])))) \n\n(defn update-state [state dt] state\n  (let [canvas (get-canvas)]\n    (assoc state :hover (into [] (map int (to-world (io/mouse-pos canvas)))))))\n \n(defn draw! [state]\n  (let [canvas (get-canvas)\n        ctx (. canvas getContext \"2d\")]\n    (.clearRect ctx 0 0 (.-width canvas) (.-height canvas))\n    (draw-map! ctx state)))\n\n(defn tick! []\n  (let [t (.now js/Date)\n        dt (- t @current-time)\n        new-state (update-state @state dt)]\n    (do (reset! current-time t)\n        (draw! new-state)\n        (reset! state new-state))))\n\n(defn ^:dev/before-load stop []\n  (println \"Stopping...\"))\n\n(defn ^:dev/after-load start []\n  (println (str \"Starting...\")))\n\n(defn ^:export init []\n  (println \"Initializing...\")\n  (js/setInterval tick! 20)\n  (reset! state (init-state))\n  (io/init!)\n  (start))\n"]}