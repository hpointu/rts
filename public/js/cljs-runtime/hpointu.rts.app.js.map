{"version":3,"sources":["hpointu/rts/app.cljs"],"mappings":"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","names":["hpointu.rts.app/current-time","cljs.core.atom","js/hpointu","js/hpointu.rts","js/hpointu.rts.app","js/hpointu.rts.app.state","hpointu.rts.app/state","reagent.core.atom","js/hpointu.rts.app.frame-counter","hpointu.rts.app/frame-counter","js/hpointu.rts.app.fps","hpointu.rts.app/fps","hpointu.rts.app/get-debug-content","cljs.core/deref","sb__4667__auto__","goog.string/StringBuffer","*print-newline*-orig-val__44344","cljs.core/*print-newline*","*print-fn*-orig-val__44345","cljs.core/*print-fn*","*print-newline*-temp-val__44346","*print-fn*-temp-val__44347","x__4668__auto__","cljs.pprint.pprint","cljs.core.dissoc","hpointu.rts.app/SIZE","hpointu.rts.app/init-state","hpointu.rts.core/->world","p__44348","map__44349","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","cljs.core.get","hpointu.rts.app/redraw-world","world","state","elems","iter__4529__auto__","s__44352","cljs.core/LazySeq","temp__5735__auto__","cljs.core/seq","xs__6292__auto__","cljs.core/first","iterys__4525__auto__","s__44354","cljs.core/chunked-seq?","c__4527__auto__","size__4528__auto__","cljs.core/count","b__44356","cljs.core/chunk-buffer","i__44355","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__44353","cljs.core/chunk-rest","cljs.core/cons","cljs.core/rest","fs__4526__auto__","cljs.core.concat","iter__44351","x","cljs.core.range","hpointu.rts.core/world-width","y","hpointu.rts.core/world-height","cljs.core.assoc","var_args","G__44358","hpointu.rts.app/to-screen","js/Error","p__44359","vec__44360","cljs.core.nth","coords","hpointu.rts.app.to_screen","size","p__44363","vec__44364","hpointu.rts.app/to-world","hpointu.rts.app/get-game-canvas","js/document.getElementById","hpointu.rts.app/get-minimap-canvas","hpointu.rts.app/context","canvas-name","hpointu.rts.app/visible?","hpointu.rts.app/draw-tile!","ctx","hover?","vec__44367","tile-color","hpointu.rts.core/obstacle?","hpointu.rts.graphics/render-item!","p__44370","map__44371","hpointu.rts.app/draw-minimap!","seq__44373","chunk__44378","count__44379","i__44380","seq__44381","chunk__44382","count__44383","i__44384","c__4556__auto__","cljs.core/chunk-first","cljs.core/next","seq__44374","chunk__44375","count__44376","i__44377","vec__44415","vec__44418","vec__44427","vec__44430","color","p__44433","map__44434","hpointu.rts.app/update-hover","hover","new-hover","hpointu.rts.core/in-world?","cljs.core.update","cljs.core/into","cljs.core.keep","cljs.core/identity","p__44436","map__44437","hpointu.rts.app/handle-input","and__4115__auto__","hpointu.rts.input/key-pressed?","vec__44439","cljs.core/assoc-in","p__44442","map__44443","hpointu.rts.app/update-state","dt","vec__44445","canvas","cljs.core.map","cljs.core/int","hpointu.rts.input/mouse-pos","p__44448","map__44449","hpointu.rts.app/draw!","world-updates","seq__44451","chunk__44453","count__44454","i__44455","vec__44463","vec__44466","cljs.core._EQ_","seq__44469","chunk__44470","count__44471","i__44472","vec__44485","vec__44491","vec__44488","vec__44494","hpointu.rts.app/tick!","t","js/Date","new-state","cljs.core/reset!","cljs.core.swap_BANG_","cljs.core/inc","p1__44497#","hpointu.rts.app/rts-app","props","hpointu.rts.app/timers","hpointu.rts.app/stop","seq__44498","chunk__44499","count__44500","i__44501","js/clearInterval","cljs.core.println","hpointu.rts.app/start","reagent.dom.render","cljs.core/conj","js/setInterval","hpointu.rts.app/init","hpointu.rts.input/init!"],"sourcesContent":["(ns hpointu.rts.app\n  (:require [hpointu.rts.graphics :as g]\n            [hpointu.rts.input :as io]\n            [hpointu.rts.core :as core]\n            [reagent.core :as r]\n            [reagent.dom :as rdom]\n            [cljs.pprint]))\n\n\n(def current-time (atom 0))\n(defonce state (r/atom {}))\n\n;; hack for FPS counter\n(defonce frame-counter (atom 0))\n(defonce fps (r/atom 0))\n\n(defn get-debug-content []\n  (str \"FPS: \" @fps \"\\n\"\n    (with-out-str (cljs.pprint/pprint (-> @state (dissoc :world)\n                                          (dissoc :world-updates))))))\n\n(def SIZE 35)\n(defn init-state []\n  {:world (core/->world 74 74)\n   :world-updates []})\n\n(defn redraw-world [{:keys [world] :as state}]\n  (let [elems (for [x (range (core/world-width world))\n                    y (range (core/world-height world))]\n                [x y])]\n    (assoc state :world-updates elems)))\n\n(defn to-screen\n  ([coords]\n   (to-screen coords SIZE))\n  ([[x y] size]\n   [(* size x) (* size y)]))\n\n(defn to-world [[x y]]\n  [(/ x SIZE) (/ y SIZE)])\n\n(defn get-game-canvas []\n  (js/document.getElementById \"game\"))\n\n(defn get-minimap-canvas []\n  (js/document.getElementById \"minimap\"))\n\n(defn context [canvas-name]\n  (.getContext (js/document.getElementById canvas-name) \"2d\"))\n\n(defn visible? [state x y]\n  (and (< x 18)\n       (< y 14)))\n\n(defn draw-tile! [ctx world x y size hover?]\n  (let [tile-color (if (core/obstacle? world x y) \"gray\" (if hover? \"green\" \"#222\"))\n        [x y] (to-screen [x y])]\n    (g/render-item! ctx {:type :rect :x (+ 1 x) :y (+ 1 y)\n                         :w (- size 2) :h (- size 2) :fill tile-color})\n    (g/render-item! ctx {:type :rect :x (+ 2 x) :y (+ 2 y)\n                         :w (- size 4) :h (- size 4) :fill \"black\"})))\n\n(defn draw-minimap! [ctx {:keys [world] :as state}]\n  (doseq [x (range (core/world-width world))\n          y (range (core/world-height world))]\n    (let [size 2\n          color (if (core/obstacle? world x y) \"gray\" \"#111\")\n          [x y] (to-screen [x y] size)]\n      (g/render-item! ctx {:type :rect :x x :y y :w size :h size :fill color}))))\n\n(defn update-hover [{:keys [hover world] :as state} x y]\n  (let [new-hover (when (core/in-world? world x y) [x y])]\n    (-> state\n        (assoc :hover new-hover)\n        (update :world-updates into (keep identity [new-hover hover])))))\n\n(defn handle-input [{:keys [hover] :as state}]\n  (if (and hover (io/key-pressed? \"KeyW\"))\n    (let [[x y] hover]\n      (assoc-in state [:world y x] :w))\n    state))\n   \n\n(defn update-state [{:keys [world] :as state} dt] state\n  (let [canvas (get-game-canvas)\n        [x y] (map int (to-world (io/mouse-pos canvas)))]\n    (-> state\n        (update-hover x y)\n        (handle-input))))\n \n(defn draw! [{:keys [world-updates world hover] :as state}]\n  (doseq [[x y] world-updates\n          :when (visible? state x y)]\n    (draw-tile! (context \"game\") world x y SIZE (= hover [x y])))\n  (doseq [[x y] world-updates]\n    (let [size 3\n          color (if (core/obstacle? world x y) \"gray\" \"#111\")\n          [x y] (to-screen [x y] size)]\n      (g/render-item! (context \"minimap\") {:type :rect :x x :y y :w size :h size :fill color})))\n  (assoc state :world-updates []))\n\n(defn tick! []\n  (let [t (.now js/Date)\n        dt (- t @current-time)\n        new-state (draw! (update-state @state dt))]\n    (do (reset! current-time t)\n        (reset! state new-state)\n        (swap! frame-counter inc))))\n\n(defn rts-app [props]\n  [:div {:style {:color \"white\"}}\n   [:h2 {:style {:margin \"0 0 5px 0\"\n                 :padding 10\n                 :width 820\n                 :background-color \"black\"}}\n    \"RTS Demo\"]\n   [:div {:style {:display \"flex\"}}\n     [:div {:style {:width 223\n                    :margin-right 5\n                    :display \"flex\"\n                    :flex-flow \"column wrap\"}}\n      [:canvas {:id \"minimap\"\n                :width 223\n                :height 223\n                :style {:background-color \"#111\" :width 223 :height 223}}]\n      [:div {:style {:background-color \"black\"\n                     :flex-grow 1\n                     :padding 15 :margin-top 5}}\n       [:h4 {:style {:margin 0}} \"TODO:\"]\n       [:ul {:style {:font-size \"0.8em\" :margin 0}}\n        [:li \"Minimap\"]\n        [:li \"Camera movement\"]\n        [:li \"Mouse mode\"]]]]\n     [:canvas {:id \"game\" :width 611 :height 480\n               :onContextMenu #(.preventDefault %)\n               :style {:background-color \"black\"\n                       :min-width 611\n                       :margin 0}}]]\n   [:pre {:style {:background-color \"black\"\n                  :margin-top 5\n                  :padding 10\n                  :width 820}}\n    (get-debug-content)]])\n\n(def timers (atom []))\n; (reset! state (init-state))\n(defn ^:dev/before-load stop []\n  (doseq [t @timers]\n    (js/clearInterval t))\n  (println \"Stopping...\"))\n\n(defn ^:dev/after-load start []\n  (println (str \"Starting...\"))\n  (swap! state redraw-world)\n  (rdom/render [rts-app] (js/document.getElementById \"app\"))\n  (swap! timers conj (js/setInterval tick! 16.66))\n  (swap! timers conj (js/setInterval\n                      #(do \n                         (reset! fps @frame-counter)\n                         (reset! frame-counter 0))\n                      1000)))\n\n(defn ^:export init []\n  (println \"Initializing...\")\n  (reset! state (init-state))\n  (start)\n  (io/init!))\n\n"]}