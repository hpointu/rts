{"version":3,"sources":["hpointu/rts/app.cljs"],"mappings":"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","names":["hpointu.rts.app/current-time","cljs.core.atom","js/Date","js/hpointu","js/hpointu.rts","js/hpointu.rts.app","js/hpointu.rts.app.state","hpointu.rts.app/state","reagent.core.atom","js/hpointu.rts.app.frame-counter","hpointu.rts.app/frame-counter","js/hpointu.rts.app.fps","hpointu.rts.app/fps","hpointu.rts.app/SIZE","hpointu.rts.app/init-state","hpointu.rts.core/->world","hpointu.rts.core/->unit","hpointu.rts.core/add-waypoint","p__62283","map__62284","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","cljs.core.get","hpointu.rts.app/visible?","camera","x","y","vec__62286","cljs.core.nth","cx","cy","p__62289","vec__62290","hpointu.rts.app/visible-range","iter__4529__auto__","s__62294","cljs.core/LazySeq","temp__5735__auto__","cljs.core/seq","xs__6292__auto__","cljs.core/first","iterys__4525__auto__","s__62296","cljs.core/chunked-seq?","c__4527__auto__","size__4528__auto__","cljs.core/count","b__62298","cljs.core/chunk-buffer","i__62297","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__62295","cljs.core/chunk-rest","cljs.core/cons","cljs.core/rest","fs__4526__auto__","cljs.core.concat","iter__62293","cljs.core.range","p__62299","map__62300","hpointu.rts.app/hover?","hover","cljs.core._EQ_","p__62302","vec__62303","hpointu.rts.app/cell-redraw","p__62306","map__62307","hpointu.rts.app/redraw-world","world","state","elems","s__62310","s__62312","b__62314","i__62313","iter__62311","iter__62309","hpointu.rts.core/world-width","hpointu.rts.core/world-height","cljs.core.update","cljs.core/conj","cljs.core/into","p__62315","map__62316","hpointu.rts.app/redraw-visible","s__62319","b__62321","i__62320","vec__62322","iter__62318","vec__62325","p__62328","p__62329","map__62330","vec__62331","hpointu.rts.app/to-game-canvas","vec__62335","cljs.core.into","cljs.core.map","cljs.core/int","p__62338","vec__62339","hpointu.rts.app/to-minimap-canvas","size","var_args","G__62343","hpointu.rts.app/to-world","js/Error","p__62344","vec__62345","pos","hpointu.rts.app.to_world","hpointu.rts.app/get-game-canvas","js/document.getElementById","hpointu.rts.app/get-minimap-canvas","hpointu.rts.app/get-element","id","hpointu.rts.app/context","canvas-name","hpointu.rts.app/mouse-on-element?","vec__62348","elem","hpointu.rts.input/mouse-pos","hpointu.rts.app/init-contexts","minimap","canvas","G__62351","js/document.createElement","selector","p__62352","map__62353","hpointu.rts.app/draw-tile!","ctx","vec__62355","tile-color","hpointu.rts.core/obstacle?","hpointu.rts.graphics/render-item!","p__62358","map__62359","hpointu.rts.app/update-hover","vec__62361","new-hover","hpointu.rts.core.in_world_QMARK_","cljs.core.assoc","cljs.core.keep","cljs.core/identity","p__62364","map__62365","hpointu.rts.app/add-wall","vec__62367","hpointu.rts.core/set-world-cell","p__62370","map__62371","hpointu.rts.app/clamp-camera","max-x","max-y","round","f","js/Math.round","fixed","cljs.core.update_in","cljs.core/min","cljs.core/max","hpointu.rts.app/move-camera","dx","dy","speed","cljs.core/+","hpointu.rts.app/handle-minimap","and__4115__auto__","hpointu.rts.input/mouse-pressed?","vec__62373","cljs.core/assoc-in","p__62376","map__62377","hpointu.rts.app/handle-keys","G__62379","hpointu.rts.input/key-pressed?","cljs.core/some","p__62381","map__62382","hpointu.rts.app/move-units","units","dt","p1__62380#","hpointu.rts.core/walk","p__62384","map__62385","hpointu.rts.app/update-state","vec__62387","cljs.core.comp","p__62390","vec__62391","seq__62392","first__62393","cljs.core/next","hpointu.rts.app/draw-game-elem!","update-type","args","vec__62394","p__62397","p__62398","map__62399","vec__62400","seq__62401","first__62402","hpointu.rts.app/draw-minimap-elem!","vec__62404","vec__62407","color","p__62410","map__62411","hpointu.rts.app/draw!","world-updates","contexts","seq__62413","chunk__62414","count__62415","i__62416","c__4556__auto__","cljs.core/chunk-first","wu","seq__62417","chunk__62419","count__62420","i__62421","map__62433","map__62438","selected?","vec__62435","vec__62440","vec__62443","mmap","seq__62446","chunk__62447","count__62448","i__62449","map__62460","map__62465","vec__62462","vec__62467","hpointu.rts.app/tick!","t","cljs.core/deref","new-state","cljs.core/reset!","cljs.core.swap_BANG_","cljs.core/inc","hpointu.rts.app/get-debug-content","hpointu.rts.input/keymap","hpointu.rts.input/mouse","sb__4667__auto__","goog.string/StringBuffer","*print-newline*-orig-val__62474","cljs.core/*print-newline*","*print-fn*-orig-val__62475","cljs.core/*print-fn*","*print-newline*-temp-val__62476","*print-fn*-temp-val__62477","x__4668__auto__","cljs.pprint.pprint","cljs.core.dissoc","hpointu.rts.app/rts-app","props","hpointu.rts.app/timers","hpointu.rts.app/stop","seq__62478","chunk__62479","count__62480","i__62481","js/clearInterval","cljs.core.println","hpointu.rts.app/start","reagent.dom.render","js/setInterval","hpointu.rts.app/init","hpointu.rts.input/init!"],"sourcesContent":["(ns hpointu.rts.app\n  (:require [hpointu.rts.graphics :as g]\n            [hpointu.rts.input :as io]\n            [hpointu.rts.core :as core]\n            [reagent.core :as r]\n            [reagent.dom :as rdom]\n            [cljs.pprint]))\n\n\n(def current-time (atom (.now js/Date)))\n(defonce state (r/atom {}))\n\n;; hack for FPS counter\n(defonce frame-counter (atom 0))\n(defonce fps (r/atom 0))\n\n(def SIZE 35)\n(defn init-state []\n  {:world (core/->world 74 74)\n   :camera [0 0]\n   :units [(-> (core/->unit 3 4)\n               (core/add-waypoint 5 5)\n               (core/add-waypoint 2 7)\n               (core/add-waypoint 2 9))]\n   :world-updates []})\n\n(defn visible? [{:keys [camera]} x y]\n  (let [[cx cy] camera]\n    (and (< x (+ cx 18))\n         (< y (+ cy 14)))))\n\n(defn visible-range [[cx cy :as camera]]\n  (for [x (range (int cx) (int (+ cx 18)))\n        y (range (int cy) (int (+ cy 14)))]\n    [x y]))\n\n(defn hover? [{:keys [hover]} x y]\n  (= hover [x y]))\n\n(defn cell-redraw [[x y]]\n  [:cell x y])\n\n(defn redraw-world [{:keys [world] :as state}]\n  (let [elems (for [x (range (core/world-width world))\n                    y (range (core/world-height world))]\n                (cell-redraw [x y]))]\n    (-> state\n        (update :world-updates conj [:clear])\n        (update :world-updates into elems))))\n\n(defn redraw-visible [{:keys [world camera] :as state}]\n  (let [elems (for [[x y] (visible-range camera)]\n                (cell-redraw [x y]))]\n    (-> state\n        (update :world-updates conj [:clear])\n        (update :world-updates into elems))))\n\n(defn to-game-canvas [{:keys [camera]} [x y]]\n  (let [[cx cy] camera]\n    (into [] (map int [(* SIZE (- x cx)) (* SIZE (- y cy))]))))\n\n(defn to-minimap-canvas [[x y] size]\n  [(* size x) (* size y)])\n\n(defn to-world\n  ([pos]\n   (to-world pos SIZE))\n  ([[x y] size]\n   [(/ x size) (/ y size)]))\n\n(defn get-game-canvas []\n  (js/document.getElementById \"game\"))\n\n(defn get-minimap-canvas []\n  (js/document.getElementById \"minimap\"))\n\n(defn get-element [id]\n  (js/document.getElementById id))\n\n(defn context [canvas-name]\n  (.getContext (js/document.getElementById canvas-name) \"2d\"))\n\n(defn mouse-on-element? [id]\n  (let [elem (get-element id)\n        [x y] (io/mouse-pos elem)]\n    (and (< -1 x elem.width)\n         (< -1 y elem.height))))\n\n(defn init-contexts []\n  (let [minimap (get-minimap-canvas)\n        canvas {:game (get-game-canvas)\n                :minimap minimap\n                :minimap-off (doto (js/document.createElement \"canvas\")\n                               (aset \"width\" (.-width minimap))\n                               (aset \"height\" (.-height minimap)))}]\n    (fn [selector]\n      {:canvas (selector canvas)\n       :context (.getContext (selector canvas) \"2d\")})))\n\n(defn draw-tile! [ctx {:keys [world] :as state} x y size]\n  (let [tile-color (cond\n                     (core/obstacle? world x y) \"gray\"\n                     (hover? state x y) \"green\"\n                     :else \"#222\")\n        [x y] (to-game-canvas state [x y])]\n    (g/render-item! ctx {:type :rect :x (+ 1 x) :y (+ 1 y)\n                         :w (- size 2) :h (- size 2) :fill tile-color})\n    (g/render-item! ctx {:type :rect :x (+ 2 x) :y (+ 2 y)\n                         :w (- size 4) :h (- size 4) :fill \"black\"})))\n\n(defn update-hover [{:keys [hover world camera] :as state} x y]\n  (let [[cx cy] camera\n        new-hover (when (core/in-world? world x y) [x y])]\n    (-> state\n        (assoc :hover new-hover)\n        (update :world-updates into (map cell-redraw (keep identity [new-hover hover]))))))\n\n(defn add-wall [{:keys [hover] :as state}]\n  (let [[x y] hover]\n    (update state :world core/set-world-cell x y :w)))\n\n(defn clamp-camera [{:keys [world] :as state}]\n  (let [max-x (- (core/world-width world) 17.4)\n        max-y (- (core/world-height world) 13.6)\n        round (fn [f] (/ (js/Math.round (* 10 f)) 10))\n        fixed (fn [camera] (into [] (map round camera)))]\n    (-> state\n      (update-in [:camera 0] min max-x)\n      (update-in [:camera 0] max 0)\n      (update-in [:camera 1] min max-y)\n      (update-in [:camera 1] max 0)\n      (update :camera fixed))))\n\n(defn move-camera [state dx dy]\n  (let [speed 0.3]\n    (-> state\n        (update-in [:camera 0] + (* speed dx))\n        (update-in [:camera 1] + (* speed dy))\n        (clamp-camera))))\n\n(defn handle-minimap [state]\n  (if (and (io/mouse-pressed? :left)\n           (mouse-on-element? \"minimap\"))\n    (let [[x y] (to-world (io/mouse-pos (get-minimap-canvas)) 3)]\n      (-> state\n          (assoc-in [:camera 0] (- x 9))\n          (assoc-in [:camera 1] (- y 7))\n          (clamp-camera)))\n    state))\n\n(defn handle-keys [{:keys [hover] :as state}]\n  (cond-> state\n    ;; Pressing W\n    (and hover (io/key-pressed? \"KeyW\"))\n    (add-wall)\n    ;; Pressing Space\n    (and hover (io/key-pressed? \"Space\"))\n    (update-in [:units 0] core/add-waypoint (nth hover 0) (nth hover 1))\n    ;; Pressing arrows\n    (some io/key-pressed? #{\"ArrowLeft\" \"ArrowRight\" \"ArrowUp\" \"ArrowDown\"})\n    (move-camera (cond (io/key-pressed? \"ArrowLeft\") -1\n                       (io/key-pressed? \"ArrowRight\") 1\n                       :else 0)\n                 (cond (io/key-pressed? \"ArrowUp\") -1\n                      (io/key-pressed? \"ArrowDown\") 1\n                      :else 0))))\n\n(defn move-units [{:keys [units] :as state} dt]\n  (assoc state :units (into [] (map #(core/walk % dt) units))))\n   \n(defn update-state [{:keys [world camera] :as state} dt] state\n  (let [canvas (get-game-canvas)\n        [x y] (map (comp int +) camera (to-world (io/mouse-pos canvas)))]\n    (-> state\n        (move-units dt)\n        (update-hover x y)\n        (handle-keys)\n        (handle-minimap)\n        (redraw-visible))))\n\n\n(defn draw-game-elem! [state [update-type & args]]\n  (cond (= update-type :cell)\n        (let [[x y] args]\n          (when (visible? state x y)\n            (draw-tile! (context \"game\") state x y SIZE)))\n        (= update-type :clear)\n        (let [canvas (get-game-canvas)]\n          (.clearRect (context \"game\") 0 0 (.-width canvas) (.-height canvas)))))\n    \n(defn draw-minimap-elem! [ctx {:keys [world] :as state} [update-type & args]]\n  (cond (= update-type :cell)\n        (let [size 3\n              [x y] args\n              color (if (core/obstacle? world x y) \"gray\" \"#111\")\n              [x y] (to-minimap-canvas args size)]\n          (g/render-item! ctx {:type :rect :x x :y y\n                               :w size :h size :fill color}))))\n \n(defn draw! [{:keys [world-updates world units] :as state} contexts]\n  (doseq [wu world-updates]\n    (draw-game-elem! state wu)\n    (draw-minimap-elem! (:context (contexts :minimap-off)) state wu))\n  (doseq [{:keys [x y selected?]} units\n          :when (visible? state x y)]\n    (let [[x y] (map + (to-game-canvas state [x y])\n                     [(/ SIZE 2) (/ SIZE 2)])]\n      (g/render-item! (context \"game\") {:type :circle :x x :y y :r 12 :fill \"#0cf\"})))\n  (let [[cx cy] (:camera state)\n        mmap (contexts :minimap)]\n    (.clearRect (:context mmap) 0 0\n                (.-width (:canvas mmap)) (.-height (:canvas mmap)))\n    (.drawImage (:context mmap)\n                (:canvas (contexts :minimap-off)) 0 0)\n    (doseq [{:keys [x y]} units]\n      (let [[x y] (to-minimap-canvas [x y] 3)]\n        (g/render-item! (context \"minimap\")\n                        {:type :rect :x x :y y :w 3 :h 3\n                         :fill \"yellow\"})))\n    (g/render-item! (context \"minimap\")\n                    {:type :box :x (* 3 cx) :y (* 3 cy)\n                     :w 53 :h 42 :color \"white\"}))\n  (assoc state :world-updates []))\n\n(defn tick! [contexts]\n  (let [t (.now js/Date)\n        dt (- t @current-time)\n        new-state (draw! (update-state @state dt) contexts)]\n    (do (reset! current-time t)\n        (reset! state new-state)\n        (swap! frame-counter inc))))\n\n(defn get-debug-content []\n  (str \"FPS: \" @fps \" - \" @io/keymap \" - \" @io/mouse \"\\n\"\n       (with-out-str (cljs.pprint/pprint (-> @state (dissoc :world)\n                                             (dissoc :world-updates))))))\n(defn rts-app [props]\n  [:div {:style {:color \"white\"}}\n   [:h2 {:style {:margin \"0 0 5px 0\"\n                 :padding 10\n                 :width 820\n                 :background-color \"black\"}}\n    \"RTS Demo\" [:span {:style {:font-size \"0.7em\"\n                               :font-family \"mono\"\n                               :color \"red\"\n                               :margin-left 90}}\n                \"- Press W on the map to place a wall\"]]\n   [:div {:style {:display \"flex\"}}\n     [:div {:style {:width 223\n                    :margin-right 5\n                    :display \"flex\"\n                    :flex-flow \"column wrap\"}}\n      [:canvas {:id \"minimap\"\n                :width 223\n                :height 223\n                :style {:background-color \"#111\" :width 223 :height 223}}]\n      [:div {:style {:background-color \"black\"\n                     :font-family \"mono\"\n                     :flex-grow 1\n                     :padding 15 :margin-top 5}}\n       [:h4 {:style {:margin 0}} \"TODO:\"]\n       [:ul {:style {:font-size \"0.8em\" :margin 0 :padding-left 20}}\n        [:li {:style {:text-decoration \"line-through\" :color \"#888\"}} \"Minimap\"]\n        [:li {:style {:text-decoration \"line-through\" :color \"#888\"}} \"Camera movement\"]\n        [:li {:style {:text-decoration \"line-through\" :color \"#888\"}} \"Entities\"]\n        [:li {:style {:text-decoration \"initial\"}} \"Mouse mode\"]\n        [:li {:style {:text-decoration \"initial\"}} \"Mouse clicks...\"]\n        [:li {:style {:text-decoration \"initial\"}} \"Stop scrolling on keys\"]\n        [:li {:style {:text-decoration \"initial\"}} \"Path finding\"]\n        [:li {:style {:text-decoration \"initial\"}} \"Gameplay elements\"]]]]\n     [:canvas {:id \"game\" :width 611 :height 480\n               :style {:background-color \"black\"\n                       :min-width 611\n                       :margin 0}}]]\n   [:pre {:style {:background-color \"black\"\n                  :margin-top 5\n                  :padding 10\n                  :width 820}}\n    (get-debug-content)]])\n\n(def timers (atom []))\n;(reset! state (init-state))\n(defn ^:dev/before-load stop []\n  (doseq [t @timers]\n    (js/clearInterval t))\n  (println \"Stopping...\"))\n\n(defn ^:dev/after-load start []\n  (println (str \"Starting...\"))\n  (swap! state redraw-world)\n  (rdom/render [rts-app] (js/document.getElementById \"app\"))\n  (let [contexts (init-contexts)]\n    (swap! timers conj (js/setInterval #(tick! contexts) 16.66)))\n  (swap! timers conj (js/setInterval\n                      #(do \n                         (reset! fps @frame-counter)\n                         (reset! frame-counter 0))\n                      1000)))\n\n(defn ^:export init []\n  (println \"Initializing...\")\n  (reset! state (init-state))\n  (start)\n  (io/init!))\n\n"]}