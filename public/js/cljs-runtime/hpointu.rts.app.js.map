{"version":3,"sources":["hpointu/rts/app.cljs"],"mappings":"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","names":["hpointu.rts.app/current-time","cljs.core.atom","js/Date","js/hpointu","js/hpointu.rts","js/hpointu.rts.app","js/hpointu.rts.app.state","hpointu.rts.app/state","reagent.core.atom","js/hpointu.rts.app.frame-counter","hpointu.rts.app/frame-counter","js/hpointu.rts.app.fps","hpointu.rts.app/fps","hpointu.rts.app/SIZE","hpointu.rts.app/init-state","hpointu.rts.core/->world","hpointu.rts.core/->unit","hpointu.rts.core/add-waypoint","p__125669","map__125670","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","cljs.core.get","hpointu.rts.app/visible?","camera","x","y","vec__125672","cljs.core.nth","cx","cy","p__125675","vec__125676","hpointu.rts.app/visible-range","iter__4529__auto__","s__125680","cljs.core/LazySeq","temp__5735__auto__","cljs.core/seq","xs__6292__auto__","cljs.core/first","iterys__4525__auto__","s__125682","cljs.core/chunked-seq?","c__4527__auto__","size__4528__auto__","cljs.core/count","b__125684","cljs.core/chunk-buffer","i__125683","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__125681","cljs.core/chunk-rest","cljs.core/cons","cljs.core/rest","fs__4526__auto__","cljs.core.concat","iter__125679","cljs.core.range","p__125685","map__125686","hpointu.rts.app/hover?","hover","cljs.core._EQ_","p__125688","vec__125689","hpointu.rts.app/cell-redraw","p__125692","map__125693","hpointu.rts.app/redraw-world","world","state","elems","s__125696","s__125698","b__125700","i__125699","iter__125697","iter__125695","hpointu.rts.core/world-width","hpointu.rts.core/world-height","cljs.core.update","cljs.core/conj","cljs.core/into","p__125701","map__125702","hpointu.rts.app/redraw-visible","s__125705","b__125707","i__125706","vec__125708","iter__125704","vec__125711","p__125714","p__125715","map__125716","vec__125717","hpointu.rts.app/to-game-canvas","vec__125721","cljs.core.into","cljs.core.map","cljs.core/int","p__125724","vec__125725","hpointu.rts.app/to-minimap-canvas","size","var_args","G__125729","hpointu.rts.app/to-world","js/Error","p__125730","vec__125731","pos","hpointu.rts.app.to_world","hpointu.rts.app/to-grid","cljs.core.comp","cljs.core/+","p__125735","map__125736","hpointu.rts.app/unit-aabb","unit","vec__125738","p1__125734#","hpointu.rts.app/get-game-canvas","js/document.getElementById","hpointu.rts.app/get-minimap-canvas","hpointu.rts.app/get-element","id","hpointu.rts.app/context","canvas-name","hpointu.rts.app/mouse-on-element?","vec__125741","elem","hpointu.rts.input/mouse-pos","hpointu.rts.app/init-contexts","minimap","canvas","G__125744","js/document.createElement","selector","p__125745","map__125746","hpointu.rts.app/draw-tile!","ctx","vec__125748","tile-color","hpointu.rts.core/obstacle?","hpointu.rts.graphics/render-item!","p__125751","map__125752","hpointu.rts.app/update-hover","vec__125754","new-hover","hpointu.rts.core.in_world_QMARK_","cljs.core.assoc","cljs.core.keep","cljs.core/identity","p__125757","map__125758","hpointu.rts.app/add-wall","vec__125760","hpointu.rts.core/set-world-cell","p__125763","map__125764","hpointu.rts.app/clamp-camera","max-x","max-y","round","f","js/Math.round","fixed","cljs.core.update_in","cljs.core/min","cljs.core/max","hpointu.rts.app/move-camera","dx","dy","speed","p__125767","map__125768","hpointu.rts.app/select-units","map__125770","vec__125771","vec__125774","x1","y1","x2","y2","x__4217__auto__","y__4218__auto__","x__4214__auto__","y__4215__auto__","rect","p__125778","map__125779","hpointu.rts.app/select-unit","u","hpointu.rts.core/collides?","p1__125766#","hpointu.rts.app/end-game-left-click","cljs.core.dissoc","p__125782","map__125783","hpointu.rts.app/end-game-right-click","right-click","p__125785","map__125786","hpointu.rts.app/set-unit-destination","selected?","waypoints","hpointu.rts.path/path","p1__125781#","p__125790","map__125791","hpointu.rts.app/handle-mouse-game","vec__125793","vec__125796","wx","wy","and__4115__auto__","hpointu.rts.input/mouse-pressed?","cljs.core/not","p1__125788#","p1__125789#","hpointu.rts.app/handle-mouse-minimap","vec__125799","cljs.core/assoc-in","hpointu.rts.app/handle-mouse","p__125802","map__125803","hpointu.rts.app/handle-keys","G__125805","hpointu.rts.input/key-pressed?","cljs.core/some","p__125807","map__125808","hpointu.rts.app/move-units","units","dt","p1__125806#","hpointu.rts.core/walk","p__125810","map__125811","hpointu.rts.app/update-state","vec__125813","p__125816","vec__125817","seq__125818","first__125819","cljs.core/next","hpointu.rts.app/draw-game-elem!","update-type","args","vec__125820","p__125823","p__125824","map__125825","vec__125826","seq__125827","first__125828","hpointu.rts.app/draw-minimap-elem!","vec__125830","vec__125833","color","p__125836","map__125837","hpointu.rts.app/draw!","world-updates","contexts","seq__125839","chunk__125840","count__125841","i__125842","c__4556__auto__","cljs.core/chunk-first","wu","seq__125843","chunk__125845","count__125846","i__125847","map__125865","map__125873","vec__125867","vec__125875","vec__125870","vec__125878","w","h","temp__5733__auto__","map__125881","vec__125883","mmap","seq__125886","chunk__125887","count__125888","i__125889","map__125900","map__125905","vec__125902","vec__125907","hpointu.rts.app/tick!","t","cljs.core/deref","new-state","cljs.core/reset!","cljs.core.swap_BANG_","cljs.core/inc","hpointu.rts.app/get-debug-content","hpointu.rts.input/keymap","hpointu.rts.input/mouse","sb__4667__auto__","goog.string/StringBuffer","*print-newline*-orig-val__125914","cljs.core/*print-newline*","*print-fn*-orig-val__125915","cljs.core/*print-fn*","*print-newline*-temp-val__125916","*print-fn*-temp-val__125917","x__4668__auto__","cljs.pprint.pprint","hpointu.rts.app/rts-app","props","hpointu.rts.app/timers","hpointu.rts.app/stop","seq__125918","chunk__125919","count__125920","i__125921","js/clearInterval","cljs.core.println","hpointu.rts.app/start","reagent.dom.render","js/setInterval","hpointu.rts.app/init","hpointu.rts.input/init!"],"sourcesContent":["(ns hpointu.rts.app\n  (:require [hpointu.rts.graphics :as g]\n            [hpointu.rts.input :as io]\n            [hpointu.rts.core :as core]\n            [hpointu.rts.path :refer [path]]\n            [reagent.core :as r]\n            [reagent.dom :as rdom]\n            [cljs.pprint]))\n\n\n(def current-time (atom (.now js/Date)))\n(defonce state (r/atom {}))\n\n;; hack for FPS counter\n(defonce frame-counter (atom 0))\n(defonce fps (r/atom 0))\n\n(def SIZE 35)\n(defn init-state []\n  {:world (core/->world 74 74)\n   :camera [0 0]\n   :units [(-> (core/->unit 3 4)\n               (core/add-waypoint 5 5)\n               (core/add-waypoint 2 7)\n               (core/add-waypoint 2 9))]\n   :world-updates []})\n\n(defn visible? [{:keys [camera]} x y]\n  (let [[cx cy] camera]\n    (and (< x (+ cx 18))\n         (< y (+ cy 14)))))\n\n(defn visible-range [[cx cy :as camera]]\n  (for [x (range (int cx) (int (+ cx 18)))\n        y (range (int cy) (int (+ cy 14)))]\n    [x y]))\n\n(defn hover? [{:keys [hover]} x y]\n  (= hover [x y]))\n\n(defn cell-redraw [[x y]]\n  [:cell x y])\n\n(defn redraw-world [{:keys [world] :as state}]\n  (let [elems (for [x (range (core/world-width world))\n                    y (range (core/world-height world))]\n                (cell-redraw [x y]))]\n    (-> state\n        (update :world-updates conj [:clear])\n        (update :world-updates into elems))))\n\n(defn redraw-visible [{:keys [world camera] :as state}]\n  (let [elems (for [[x y] (visible-range camera)]\n                (cell-redraw [x y]))]\n    (-> state\n        (update :world-updates conj [:clear])\n        (update :world-updates into elems))))\n\n(defn to-game-canvas [{:keys [camera]} [x y]]\n  (let [[cx cy] camera]\n    (into [] (map int [(* SIZE (- x cx)) (* SIZE (- y cy))]))))\n\n(defn to-minimap-canvas [[x y] size]\n  [(* size x) (* size y)])\n\n(defn to-world\n  ([pos]\n   (to-world pos SIZE))\n  ([[x y] size]\n   [(/ x size) (/ y size)]))\n\n(defn to-grid [camera pos]\n  (map (comp int +) camera (to-world pos)))\n\n(defn unit-aabb [state {:keys [x y] :as unit}]\n  (let [[x y] (to-game-canvas state [x y])]\n    (into [] (map #(+ 5 %) [x y 20 20])))) \n\n(defn get-game-canvas []\n  (js/document.getElementById \"game\"))\n\n(defn get-minimap-canvas []\n  (js/document.getElementById \"minimap\"))\n\n(defn get-element [id]\n  (js/document.getElementById id))\n\n(defn context [canvas-name]\n  (.getContext (js/document.getElementById canvas-name) \"2d\"))\n\n(defn mouse-on-element? [id]\n  (let [elem (get-element id)\n        [x y] (io/mouse-pos elem)]\n    (and (< -1 x elem.width)\n         (< -1 y elem.height))))\n\n(defn init-contexts []\n  (let [minimap (get-minimap-canvas)\n        canvas {:game (get-game-canvas)\n                :minimap minimap\n                :minimap-off (doto (js/document.createElement \"canvas\")\n                               (aset \"width\" (.-width minimap))\n                               (aset \"height\" (.-height minimap)))}]\n    (fn [selector]\n      {:canvas (selector canvas)\n       :context (.getContext (selector canvas) \"2d\")})))\n\n(defn draw-tile! [ctx {:keys [world] :as state} x y size]\n  (let [tile-color (cond\n                     (core/obstacle? world x y) \"gray\"\n                     (hover? state x y) \"green\"\n                     :else \"#222\")\n        [x y] (to-game-canvas state [x y])]\n    (g/render-item! ctx {:type :rect :x (+ 1 x) :y (+ 1 y)\n                         :w (- size 2) :h (- size 2) :fill tile-color})\n    (g/render-item! ctx {:type :rect :x (+ 2 x) :y (+ 2 y)\n                         :w (- size 4) :h (- size 4) :fill \"black\"})))\n\n(defn update-hover [{:keys [hover world camera] :as state} x y]\n  (let [[cx cy] camera\n        new-hover (when (core/in-world? world x y) [x y])]\n    (-> state\n        (assoc :hover new-hover)\n        (update :world-updates into (map cell-redraw (keep identity [new-hover hover]))))))\n\n(defn add-wall [{:keys [hover] :as state}]\n  (let [[x y] hover]\n    (update state :world core/set-world-cell x y :w)))\n\n(defn clamp-camera [{:keys [world] :as state}]\n  (let [max-x (- (core/world-width world) 17.4)\n        max-y (- (core/world-height world) 13.6)\n        round (fn [f] (/ (js/Math.round (* 10 f)) 10))\n        fixed (fn [camera] (into [] (map round camera)))]\n    (-> state\n      (update-in [:camera 0] min max-x)\n      (update-in [:camera 0] max 0)\n      (update-in [:camera 1] min max-y)\n      (update-in [:camera 1] max 0)\n      (update :camera fixed))))\n\n(defn move-camera [state dx dy]\n  (let [speed 0.3]\n    (-> state\n        (update-in [:camera 0] + (* speed dx))\n        (update-in [:camera 1] + (* speed dy))\n        (clamp-camera))))\n\n(defn select-units [{:keys [selector] :as state}]\n  (let [{:keys [x1 y1 x2 y2]} selector\n        [x1 x2] [(min x1 x2) (max x1 x2)]\n        [y1 y2] [(min y1 y2) (max y1 y2)]\n        rect [x1 y1 (- x2 x1) (- y2 y1)]]\n    (defn select-unit [{:keys [x y] :as u}]\n      (assoc u :selected? (core/collides? (unit-aabb state u) rect)))\n    (update state :units #(into [] (map select-unit %)))))\n\n(defn end-game-left-click [state]\n  (-> state\n      (select-units)\n      (dissoc :selector)\n      (dissoc :left-click)))\n\n(defn end-game-right-click [{:keys [world right-click] :as state}]\n  (defn set-unit-destination [{:keys [x y selected?] :as unit}]\n    (if selected?\n      (let [waypoints (path world [x y] right-click)]\n        (assoc unit :waypoints waypoints))\n      unit))\n\n  (-> state\n      (update :units #(into [] (map set-unit-destination %)))\n      (dissoc :right-click)))\n\n(defn handle-mouse-game [{:keys [camera selector right-click] :as state}]\n  (let [[x y] (io/mouse-pos (get-game-canvas))\n        [wx wy] (to-grid camera [x y])]\n    (cond\n      (and (io/mouse-pressed? :left) (not (io/mouse-pressed? :right)))\n      (if selector\n        (update state :selector #(assoc % :x2 x :y2 y))\n        (-> state\n          (assoc :left-click [wx wy])\n          (update :selector #(assoc % :x1 x :y1 y :x2 x :y2 y))\n          (dissoc :selected)))\n      (and (io/mouse-pressed? :right) (not (io/mouse-pressed? :left)))\n      (if (not right-click)\n        (assoc state :right-click [wx wy])\n        state)\n      :default\n      (if selector\n        (-> state (end-game-left-click))\n        (if right-click\n          (-> state (end-game-right-click))\n          state)))))\n    \n\n(defn handle-mouse-minimap [state]\n  (if (io/mouse-pressed? :left)\n    (let [[x y] (to-world (io/mouse-pos (get-minimap-canvas)) 3)]\n      (-> state\n          (assoc-in [:camera 0] (- x 9))\n          (assoc-in [:camera 1] (- y 7))\n          (clamp-camera)))\n    state))\n\n(defn handle-mouse [state]\n  (cond (mouse-on-element? \"minimap\")\n        (handle-mouse-minimap state)\n        (mouse-on-element? \"game\")\n        (handle-mouse-game state)\n        :default state))\n\n(defn handle-keys [{:keys [hover] :as state}]\n  (cond-> state\n    ;; Pressing W\n    (and hover (io/key-pressed? \"KeyW\"))\n    (add-wall)\n    ;; Pressing arrows\n    (some io/key-pressed? #{\"ArrowLeft\" \"ArrowRight\" \"ArrowUp\" \"ArrowDown\"})\n    (move-camera (cond (io/key-pressed? \"ArrowLeft\") -1\n                       (io/key-pressed? \"ArrowRight\") 1\n                       :else 0)\n                 (cond (io/key-pressed? \"ArrowUp\") -1\n                      (io/key-pressed? \"ArrowDown\") 1\n                      :else 0))))\n\n(defn move-units [{:keys [units] :as state} dt]\n  (assoc state :units (into [] (map #(core/walk % dt) units))))\n   \n(defn update-state [{:keys [world camera] :as state} dt] state\n  (let [canvas (get-game-canvas)\n        [x y] (map (comp int +) camera (to-world (io/mouse-pos canvas)))]\n    (-> state\n        (move-units dt)\n        (update-hover x y)\n        (handle-keys)\n        (handle-mouse)\n        (redraw-visible))))\n\n\n(defn draw-game-elem! [state [update-type & args]]\n  (cond (= update-type :cell)\n        (let [[x y] args]\n          (when (visible? state x y)\n            (draw-tile! (context \"game\") state x y SIZE)))\n        (= update-type :clear)\n        (let [canvas (get-game-canvas)]\n          (.clearRect (context \"game\") 0 0 (.-width canvas) (.-height canvas)))))\n    \n(defn draw-minimap-elem! [ctx {:keys [world] :as state} [update-type & args]]\n  (cond (= update-type :cell)\n        (let [size 3\n              [x y] args\n              color (if (core/obstacle? world x y) \"gray\" \"#111\")\n              [x y] (to-minimap-canvas args size)]\n          (g/render-item! ctx {:type :rect :x x :y y\n                               :w size :h size :fill color}))))\n \n(defn draw! [{:keys [world-updates world units selector]\n              :as state} contexts]\n  (doseq [wu world-updates]\n    (draw-game-elem! state wu)\n    (draw-minimap-elem! (:context (contexts :minimap-off)) state wu))\n  (doseq [{:keys [x y selected?] :as u} units\n          :when (visible? state x y)]\n    (let [[x y] (map + (to-game-canvas state [x y])\n                     [(/ SIZE 2) (/ SIZE 2)])\n          color \"#0cf\"]\n      (when selected?\n        (let [[x y w h] (unit-aabb state u)]\n          (g/render-item! (context \"game\")\n                          {:type :box\n                           :x (- x 3) :y (- y 3)\n                           :w (+ w 6) :h (+ h 6)\n                           :color \"yellow\"})))\n      (g/render-item! (context \"game\")\n                      {:type :circle :x x :y y :r 12 :fill color})))\n  (if-let [{:keys [x1 y1 x2 y2]} selector]\n    (g/render-item! (context \"game\")\n                    {:type :box :x x1 :y y1\n                     :w (- x2 x1) :h (- y2 y1)\n                     :color \"yellow\"}))\n  (let [[cx cy] (:camera state)\n        mmap (contexts :minimap)]\n    (.clearRect (:context mmap) 0 0\n                (.-width (:canvas mmap)) (.-height (:canvas mmap)))\n    (.drawImage (:context mmap)\n                (:canvas (contexts :minimap-off)) 0 0)\n    (doseq [{:keys [x y selected?]} units]\n      (let [[x y] (to-minimap-canvas [x y] 3)]\n        (g/render-item! (context \"minimap\")\n                        {:type :rect :x x :y y :w 3 :h 3\n                         :fill (if selected? \"yellow\" \"#0cf\")})))\n    (g/render-item! (context \"minimap\")\n                    {:type :box :x (* 3 cx) :y (* 3 cy)\n                     :w 53 :h 42 :color \"white\"}))\n  (assoc state :world-updates []))\n\n(defn tick! [contexts]\n  (let [t (.now js/Date)\n        dt (- t @current-time)\n        new-state (draw! (update-state @state dt) contexts)]\n    (do (reset! current-time t)\n        (reset! state new-state)\n        (swap! frame-counter inc))))\n\n(defn get-debug-content []\n  (str \"FPS: \" @fps \" - \" @io/keymap \" - \" @io/mouse \"\\n\"\n       (with-out-str (cljs.pprint/pprint (-> @state (dissoc :world)\n                                             (dissoc :world-updates))))))\n(defn rts-app [props]\n  [:div {:style {:color \"white\"}}\n   [:h2 {:style {:margin \"0 0 5px 0\"\n                 :padding 10\n                 :width 820\n                 :background-color \"black\"}}\n    \"RTS Demo\" [:span {:style {:font-size \"0.7em\"\n                               :font-family \"mono\"\n                               :color \"red\"\n                               :margin-left 90}}\n                \"- Press W on the map to place a wall\"]]\n   [:div {:style {:display \"flex\"}}\n     [:div {:style {:width 223\n                    :margin-right 5\n                    :display \"flex\"\n                    :flex-flow \"column wrap\"}}\n      [:canvas {:id \"minimap\"\n                :width 223\n                :height 223\n                :style {:background-color \"#111\" :width 223 :height 223}}]\n      [:div {:style {:background-color \"black\"\n                     :font-family \"mono\"\n                     :flex-grow 1\n                     :padding 15 :margin-top 5}}\n       [:h4 {:style {:margin 0}} \"TODO:\"]\n       [:ul {:style {:font-size \"0.8em\" :margin 0 :padding-left 20}}\n        [:li {:style {:text-decoration \"line-through\" :color \"#888\"}} \"Minimap\"]\n        [:li {:style {:text-decoration \"line-through\" :color \"#888\"}} \"Camera movement\"]\n        [:li {:style {:text-decoration \"line-through\" :color \"#888\"}} \"Entities\"]\n        [:li {:style {:text-decoration \"line-through\" :color \"#888\"}} \"Mouse clicks...\"]\n        [:li {:style {:text-decoration \"line-through\" :color \"#888\"}} \"Path finding\"]\n        [:li {:style {:text-decoration \"initial\"}} \"Mouse mode\"]\n        [:li {:style {:text-decoration \"initial\"}} \"Stop scrolling on keys\"]\n        [:li {:style {:text-decoration \"initial\"}} \"Gameplay elements\"]]]]\n     [:canvas {:id \"game\" :width 611 :height 480\n               :style {:background-color \"black\"\n                       :min-width 611\n                       :margin 0}}]]\n   [:pre {:style {:background-color \"black\"\n                  :margin-top 5\n                  :padding 10\n                  :width 820}}\n    (get-debug-content)]])\n\n(def timers (atom []))\n;(reset! state (init-state))\n(defn ^:dev/before-load stop []\n  (doseq [t @timers]\n    (js/clearInterval t))\n  (println \"Stopping...\"))\n\n(defn ^:dev/after-load start []\n  (println (str \"Starting...\"))\n  (swap! state redraw-world)\n  (rdom/render [rts-app] (js/document.getElementById \"app\"))\n  (let [contexts (init-contexts)]\n    (swap! timers conj (js/setInterval #(tick! contexts) 16.66)))\n  (swap! timers conj (js/setInterval\n                      #(do \n                         (reset! fps @frame-counter)\n                         (reset! frame-counter 0))\n                      1000)))\n\n(defn ^:export init []\n  (println \"Initializing...\")\n  (reset! state (init-state))\n  (start)\n  (io/init!))\n\n"]}