{"version":3,"sources":["hpointu/rts/app.cljs"],"mappings":"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","names":["hpointu.rts.app/current-time","cljs.core.atom","js/hpointu","js/hpointu.rts","js/hpointu.rts.app","js/hpointu.rts.app.state","hpointu.rts.app/state","reagent.core.atom","hpointu.rts.app/get-debug-content","sb__4667__auto__","goog.string/StringBuffer","*print-newline*-orig-val__44888","cljs.core/*print-newline*","*print-fn*-orig-val__44889","cljs.core/*print-fn*","*print-newline*-temp-val__44890","*print-fn*-temp-val__44891","x__4668__auto__","cljs.pprint.pprint","cljs.core/deref","cljs.core.dissoc","hpointu.rts.app/SIZE","hpointu.rts.app/init-state","hpointu.rts.core/->world","p__44892","vec__44893","cljs.core.nth","hpointu.rts.app/to-screen","x","y","p__44896","vec__44897","hpointu.rts.app/to-world","hpointu.rts.app/get-game-canvas","js/document.getElementById","hpointu.rts.app/get-minimap-canvas","hpointu.rts.app/draw-tile!","ctx","world","size","hover?","vec__44900","tile-color","hpointu.rts.core/obstacle?","hpointu.rts.graphics/render-item!","p__44903","map__44904","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","cljs.core.get","hpointu.rts.app/draw-map!","hover","state","seq__44906","cljs.core/seq","chunk__44911","count__44912","i__44913","seq__44914","chunk__44915","count__44916","i__44917","temp__5735__auto__","cljs.core/chunked-seq?","c__4556__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/count","cljs.core/first","cljs.core/next","seq__44907","chunk__44908","count__44909","i__44910","cljs.core.range","hpointu.rts.core/world-width","hpointu.rts.core/world-height","cljs.core._EQ_","p__44918","map__44919","hpointu.rts.app/update-state","dt","vec__44921","canvas","cljs.core.map","cljs.core/int","hpointu.rts.input/mouse-pos","cljs.core.assoc","hpointu.rts.core/in-world?","hpointu.rts.app/draw!","hpointu.rts.app/tick!","t","js/Date","new-state","cljs.core/reset!","p1__44924#","hpointu.rts.app/rts-app","props","hpointu.rts.app/stop","cljs.core.println","hpointu.rts.app/start","reagent.dom.render","hpointu.rts.app/init","hpointu.rts.input/init!","js/setInterval"],"sourcesContent":["(ns hpointu.rts.app\n  (:require [hpointu.rts.graphics :as g]\n            [hpointu.rts.input :as io]\n            [hpointu.rts.core :as core]\n            [reagent.core :as r]\n            [reagent.dom :as rdom]\n            [cljs.pprint]))\n\n\n(def current-time (atom 0))\n(defonce state (r/atom {}))\n\n(defn get-debug-content []\n  (with-out-str (cljs.pprint/pprint (dissoc @state :world))))\n\n(def SIZE 35)\n(defn init-state []\n  {:world (core/->world 15 10)})\n\n(defn to-screen [[x y]]\n  [(* SIZE x) (* SIZE y)])\n\n(defn to-world [[x y]]\n  [(/ x SIZE) (/ y SIZE)])\n\n(defn get-game-canvas []\n  (js/document.getElementById \"game\"))\n\n(defn get-minimap-canvas []\n  (js/document.getElementById \"minimap\"))\n\n(defn draw-tile! [ctx world x y size hover?]\n  (let [tile-color (if (core/obstacle? world x y) \"gray\" (if hover? \"green\" \"#222\"))\n        [x y] (to-screen [x y])]\n    (g/render-item! ctx {:type :rect :x (+ 1 x) :y (+ 1 y)\n                         :w (- size 2) :h (- size 2) :fill tile-color})\n    (g/render-item! ctx {:type :rect :x (+ 2 x) :y (+ 2 y)\n                         :w (- size 4) :h (- size 4) :fill \"black\"})))\n\n(defn draw-map! [ctx {:keys [world hover] :as state}]\n  (doseq [x (range (core/world-width world))\n          y (range (core/world-height world))]\n    (draw-tile! ctx world x y SIZE (= hover [x y])))) \n\n(defn update-state [{:keys [world] :as state} dt] state\n  (let [canvas (get-game-canvas)\n        [x y] (map int (to-world (io/mouse-pos canvas)))]\n    (assoc state :hover (when (core/in-world? world x y) [x y]))))\n \n(defn draw! [state]\n  (let [canvas (get-game-canvas)\n        ctx (. canvas getContext \"2d\")]\n    (.clearRect ctx 0 0 (.-width canvas) (.-height canvas))\n    (draw-map! ctx state)))\n\n(defn tick! []\n  (let [t (.now js/Date)\n        dt (- t @current-time)\n        new-state (update-state @state dt)]\n    (do (reset! current-time t)\n        (draw! new-state)\n        (reset! state new-state))))\n\n(defn rts-app [props]\n  [:div {:style {:color \"white\"}}\n   [:h2 {:style {:margin \"0 0 5px 0\"\n                 :padding 10\n                 :width 820\n                 :background-color \"black\"}}\n    \"RTS Demo\"]\n   [:div {:style {:display \"flex\"}}\n     [:div {:style {:width 235\n                    :margin-right 5\n                    :display \"flex\"\n                    :flex-flow \"column wrap\"}}\n      [:canvas {:id \"minimap\"\n                :style {:background-color \"#111\" :width 235 :height 235}}]\n      [:div {:style {:background-color \"black\"\n                     :flex-grow 1\n                     :padding 15 :margin-top 5}}\n       [:h4 {:style {:margin 0}} \"TODO:\"]\n       [:ul {:style {:font-size \"0.8em\" :margin 0}}\n        [:li \"Minimap\"]\n        [:li \"Camera movement\"]\n        [:li \"Mouse mode\"]]]]\n     [:canvas {:id \"game\" :width 600 :height 480\n               :onContextMenu #(.preventDefault %)\n               :style {:background-color \"black\"\n                       :min-width 600\n                       :margin 0}}]]\n   [:pre {:style {:background-color \"black\"\n                  :margin-top 5\n                  :padding 10\n                  :width 820}}\n    (get-debug-content)]])\n\n(defn ^:dev/before-load stop []\n  (println \"Stopping...\"))\n\n(defn ^:dev/after-load start []\n  (println (str \"Starting...\"))\n  (rdom/render [rts-app] (js/document.getElementById \"app\")))\n\n(defn ^:export init []\n  (println \"Initializing...\")\n  (reset! state (init-state))\n  (start)\n  (io/init!)\n  (js/setInterval tick! 20))\n\n"]}