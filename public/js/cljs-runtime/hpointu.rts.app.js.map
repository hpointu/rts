{"version":3,"sources":["hpointu/rts/app.cljs"],"mappings":";AAKA,AAAKA,AAAa,AAAA,AAACC;AACnB,AAAA,AAAAC,AAAAC,AAAAC,AAAAC;AAAA;AAAA,AAAA,AAASC,AAAM,AAAA,AAACL;;AAEhB,AAAA,AAAKM;AAEL,AAAA,AAAMC,AAASC,AAAMC;AAArB,AACE,AAAMC,AAAK,AAACC,AAAI,AAAAC,AAAA,AAAAC;AAAA,AAAA,AAAAC,AAAA,AAAA;AAAA,AAAA,AAAAD,AAAAA;;AAAA,AAAA,AAAAE,AAAA,AAAAC,AAAAH;AAAA,AAAA,AAAAE;AAAA,AAAA,AAAAF,AAAAE;AAAA,AAAA,AAAA,AAAAE,AAAAJ;AAAA,AAAAK,AA07EiC,AAAAwE,AAAA7E;AA17EjCM,AAAA,AAAAC,AAAAF;AAAAG,AAAA,AAAAC,AAAAH;AAAA,AAAA,AAAA,AAAA,AAAAI,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAJ;AAAA,AAAA,AAAAK,AAAAN,AAAAK,AAAMU;AAAN,AAAA,AAAA,AAAAR,AAAAJ,AAAA;;AAAA,AAAA,AAAAE,AAAA;;;;AAAA;;;;;AAAA,AAAAG,AAAA,AAAAC,AAAAN,AAAA,AAAAO,AAAA,AAAAC,AAAAhB;;AAAA,AAAAa,AAAA,AAAAC,AAAAN,AAAA;;;AAAA,AAAA,AAAAS,AAAAjB,AAAMoB;AAAN,AAAA,AAAAF,AAAA,AAAA,AAAAH,AAAA,AAAAI,AAAAnB;;;AAAA;;;;AAAA,AAAA;;AAAA,AAAA,AAAAD,AAAQ,AAACsB,AAAM1B;;AACzB2B,AACS,AAAA,AAAA,AAACC,AAAK,AAAAxB,AAAA,AAAAyB,AACN,AAACI;AADK,AAAA,AAAA3B,AAAA,AAAA;AAAA,AAAA,AAAAuB,AAAAA;;AAAA,AAAA,AAAAtB,AAAA,AAAAC,AAAAqB;AAAA,AAAA,AAAAtB;AAAA,AAAA,AAAAsB,AAAAtB;AAAA,AAAA,AAAA,AAAAE,AAAAoB;AAAA,AAAAnB,AAw7E4B,AAAAwE,AAAArD;AAx7E5BlB,AAAA,AAAAC,AAAAF;AAAAoB,AAAA,AAAAhB,AAAAH;AAAA,AAAA,AAAA,AAAA,AAAAoB,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAApB;AAAA,AAAA,AAAAK,AAAAN,AAAAqB,AAAMN;AAAN,AAAA,AAAA,AAAAR,AAAAa,AAAA;;AAAA,AAAA,AAAAC,AAAA;;;;AAAA;;;;;AAAA,AAAAb,AAAA,AAAAC,AAAAW,AAAA,AAAAE,AAAA,AAAAX,AAAAQ;;AAAA,AAAAX,AAAA,AAAAC,AAAAW,AAAA;;;AAAA,AAAA,AAAAR,AAAAO,AAAMJ;AAAN,AAAA,AAAAF,AAAA,AAAA,AAAAS,AAAA,AAAAR,AAAAK;;;AAAA;;;;AAAA,AAAA;;AAAA,AAAA,AAAAzB,AAAQ,AAACsB,AAAM,AAAA,AAAG1B;AACxB;AAHf,AAIOE,AACD,AAAA,AAAC0B,AAAK,AAAAxB,AAAA,AAAA8B,AACN,AAACD;AADK,AAAA,AAAA3B,AAAA,AAAA;AAAA,AAAA,AAAA4B,AAAAA;;AAAA,AAAA,AAAA3B,AAAA,AAAAC,AAAA0B;AAAA,AAAA,AAAA3B;AAAA,AAAA,AAAA2B,AAAA3B;AAAA,AAAA,AAAA,AAAAE,AAAAyB;AAAA,AAAAxB,AAq7EqC,AAAAwE,AAAAhD;AAr7ErCvB,AAAA,AAAAC,AAAAF;AAAAyB,AAAA,AAAArB,AAAAH;AAAA,AAAA,AAAA,AAAA,AAAAyB,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAzB;AAAA,AAAA,AAAAK,AAAAN,AAAA0B,AAAMX;AAAN,AAAA,AAAA,AAAAR,AAAAkB,AAA8BR;;AAA9B,AAAA,AAAAS,AAAA;;;;AAAA;;;;;AAAA,AAAAlB,AAAA,AAAAC,AAAAgB,AAAA,AAAAE,AAAA,AAAAhB,AAAAa;;AAAA,AAAAhB,AAAA,AAAAC,AAAAgB,AAAA;;;AAAA,AAAA,AAAAb,AAAAY,AAAMT;AAAN,AAAA,AAAAF,AAAA,AAAAc,AAAA,AAAAb,AAAAU,AAA8BP;;;AAA9B;;;;AAAA,AAAA;;AAAA,AAAA,AAAAvB,AAAQ,AAACsB,AAAM,AAAA,AAAGzB;AAClBC;;AAEd,AAAA,AAAMoC;AAAN,AAAA,AAAA,AACU,AAAA,AAAA,AAACvC;;AAEX,AAAA,AAAMwC,AAAaC;AAAnB,AACE,AAAC5B,AAAM,AAAA,AAAC6B,AAAID;;AAEd,AAAA,AAAME,AAAcF;AAApB,AACE,AAAC5B,AAAM4B;;AAET,AAAA,AAAAG,AAAMG;AAAN,AAAA,AAAAF,AAAAD;AAAA,AAAAE,AAAAD,AAAA,AAAA,AAAkBG;AAAlB,AAAAF,AAAAD,AAAA,AAAA,AAAoBI;AAApB,AAAA,AACG,AAAGlD,AAAKiD,AAAG,AAAGjD,AAAKkD;;AAEtB,AAAA,AAAAC,AAAME;AAAN,AAAA,AAAAD,AAAAD;AAAA,AAAAJ,AAAAK,AAAA,AAAA,AAAiBH;AAAjB,AAAAF,AAAAK,AAAA,AAAA,AAAmBF;AAAnB,AAAA,AACG,AAAGD,AAAEjD,AAAM,AAAGkD,AAAElD;;AAEnB,AAAA,AAAMsD;AAAN,AACE,AAAA,AAACC;;AAEH,AAAA,AAAMC,AAAWd,AAAMO,AAAEC;AAAzB,AACE,AAAA,AAAA,AAAMO;AAAN,AACE,AAAA,AAAO,AAAAC,AAAW,AAAA,AAACC,AAAOjB,AAAOQ,AAAED;AAA5B,AAAA,AAAAS,AAAAA,AAACD,AAAAA,AAAAA;AAAR;;AAEJ,AAAA,AAAMG,AAAYC,AAAInB,AAAMO,AAAEC,AAAEY,AAAKC;AAArC,AACE,AAAME,AAAW,AAAA,AAAI,AAACT,AAAUd,AAAMO,AAAEC,AAAU,AAAA,AAAA,AAAIa;AAAtDC,AACY,AAAA,AAAChB,AAAWC,AAAEC;AAD1B,AAAAH,AAAAiB,AAAA,AAAA,AACOf;AADP,AAAAF,AAAAiB,AAAA,AAAA,AACSd;AADT,AAEE,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAACgB,AAAeL,AAAoB,AAAA,AAAKZ,AAAM,AAAA,AAAKC,AAC5B,AAAA,AAAGY,AAAW,AAAA,AAAGA,AAAcG;;AACvD,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAACC,AAAeL,AAAoB,AAAA,AAAKZ,AAAM,AAAA,AAAKC,AAC5B,AAAA,AAAGY,AAAW,AAAA,AAAGA;;AAE7C,AAAA,AAAAK,AAAMK,AAAWX;AAAjB,AAAA,AAAAO,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAC,AAAA,AAAAD,AAAA,AAAA,AAAA,AAAA,AAAAE,AAAAC,AAAAH,AAAAA;AAAAA,AAA8CM;AAA9C,AAAA/B,AAAAyB,AAAA,AAA6B1B;AAA7B,AAAAC,AAAAyB,AAAA,AAAmCK;AAAnC,AACE,AAAAE,AAAA,AAAAjE,AAAU,AAACkB,AAAM,AAACa,AAAYC;AAA9BkC,AAAA;AAAAC,AAAA;AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAD,AAAAE,AAAQ7B;AAAR,AAAA,AAAA8B,AAAA,AAAArE,AACU,AAACkB,AAAM,AAACgB,AAAaF;AAD/BsC,AAAA;AAAAC,AAAA;AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAD,AAAAE,AACQhC;AADR,AAAA,AAEE,AAACU,AAAWC,AAAInB,AAAMO,AAAEC,AAAElD,AAAK,AAAA,AAAC0F,AAAEjB,AAAOxB,AAAEC;;AAF7C;AAAA,AAAA6B;AAAAC;AAAAC;AAAA,AAAAC,AAAA;;;;;;;AAAA,AAAAzE,AAAA,AAAAC,AAAAqE;AAAA,AAAA,AAAAtE;AAAA,AAAA,AAAAsE,AAAAtE;AAAA,AAAA,AAAA,AAAAE,AAAAoE;AAAA,AAAAI,AAAA,AAAAC,AAAAL;AAAA,AAAA,AAAA,AAAAxD,AAAAwD;AAAAI;AAAA,AAAArE,AAAAqE;AAAA;;;;;;;AAAA,AAAA,AAAA3D,AAAAuD,AACQ7B;AADR,AAAA,AAEE,AAACU,AAAWC,AAAInB,AAAMO,AAAEC,AAAElD,AAAK,AAAA,AAAC0F,AAAEjB,AAAOxB,AAAEC;;AAF7C;AAAA,AAAA,AAAAmC,AAAAN;AAAA;AAAA;AAAA;;;;;;;;AAAA;;;;;AAAA,AAAAJ;AAAAC;AAAAC;AAAA,AAAAC,AAAA;;;;;;;AAAA,AAAArE,AAAA,AAAAC,AAAAiE;AAAA,AAAA,AAAAlE;AAAA,AAAA,AAAAkE,AAAAlE;AAAA,AAAA,AAAA,AAAAE,AAAAgE;AAAA,AAAAQ,AAAA,AAAAC,AAAAT;AAAA,AAAA,AAAA,AAAApD,AAAAoD;AAAAQ;AAAA,AAAArE,AAAAqE;AAAA;;;;;;;AAAA,AAAA,AAAA3D,AAAAmD,AAAQ1B;AAAR,AAAA,AAAAqC,AAAA,AAAA5E,AACU,AAACkB,AAAM,AAACgB,AAAaF;AAD/B6C,AAAA;AAAAC,AAAA;AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAD,AAAAE,AACQvC;AADR,AAAA,AAEE,AAACU,AAAWC,AAAInB,AAAMO,AAAEC,AAAElD,AAAK,AAAA,AAAC0F,AAAEjB,AAAOxB,AAAEC;;AAF7C;AAAA,AAAAoC;AAAAC;AAAAC;AAAA,AAAAC,AAAA;;;;;;;AAAA,AAAAhF,AAAA,AAAAC,AAAA4E;AAAA,AAAA,AAAA7E;AAAA,AAAA,AAAA6E,AAAA7E;AAAA,AAAA,AAAA,AAAAE,AAAA2E;AAAA,AAAAH,AAAA,AAAAC,AAAAE;AAAA,AAAA,AAAA,AAAA/D,AAAA+D;AAAAH;AAAA,AAAArE,AAAAqE;AAAA;;;;;;;AAAA,AAAA,AAAA3D,AAAA8D,AACQpC;AADR,AAAA,AAEE,AAACU,AAAWC,AAAInB,AAAMO,AAAEC,AAAElD,AAAK,AAAA,AAAC0F,AAAEjB,AAAOxB,AAAEC;;AAF7C;AAAA,AAAA,AAAAmC,AAAAC;AAAA;AAAA;AAAA;;;;;;;;AAAA;;;;;AAAA,AAAA,AAAAD,AAAAV;AAAA;AAAA;AAAA;;;;;;;;AAAA;;;;;;AAIF,AAAA,AAAMgB,AAAcjB,AAAMkB;AAA1B,AAA8BlB;AAC5B,AAAMmB,AAAO,AAACvC;AAAd,AACE,AAAA,AAACwC,AAAMpB,AAAa,AAAA,AAAC5C,AAAQ,AAACiE,AAAIC,AAAI,AAAC3C,AAAS,AAAC4C,AAAaJ;;AAElE,AAAA,AAAMK,AAAOxB;AAAb,AACE,AAAMmB,AAAO,AAACvC;AACRO,AAAI,AAAA,AAAGgC;AADb,AAEE,AAAA,AAAA,AAAYhC,AAAQ,AAASgC,AAAQ,AAAUA;;AAC/C,AAACrB,AAAUX,AAAIa;;AAEnB,AAAA,AAAMyB;AAAN,AACE,AAAMC,AAAE,AAAMC;AACRT,AAAG,AAAA,AAAAU,AAAGF,AAAG3G;AACT8G,AAAU,AAAA,AAAAD,AAACX,AAAc5F,AAAM6F;AAFrC,AAGE,AAAI,AAACY,AAAO/G,AAAa2G;;AACrB,AAACF,AAAMK;;AACP,AAACC,AAAOzG,AAAMwG;;AAEtB,AAAA,AAAwBE;AAAxB,AACE,AAAA,AAACC;;AAEH,AAAA,AAAuBC;AAAvB,AACE,AAACD,AAAQ;;AAEX,AAAA,AAAeE;AAAf,AACE,AAAA,AAACF;;AACD,AAAA,AAACG,AAAeV;;AAChB,AAACK,AAAOzG,AAAM,AAACyC;;AACf,AAACsE;;AACD,AAACH","names":["hpointu.rts.app/current-time","cljs.core.atom","js/hpointu","js/hpointu.rts","js/hpointu.rts.app","js/hpointu.rts.app.state","hpointu.rts.app/state","hpointu.rts.app/SIZE","hpointu.rts.app/->world","width","height","full","cljs.core/vec","iter__4529__auto__","s__50829","cljs.core/LazySeq","temp__5735__auto__","cljs.core/seq","cljs.core/chunked-seq?","c__4527__auto__","size__4528__auto__","cljs.core/count","b__50831","cljs.core/chunk-buffer","i__50830","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__50828","cljs.core/chunk-rest","cljs.core/first","cljs.core/cons","cljs.core/rest","_","cljs.core.range","line","cljs.core.into","s__50833","b__50835","i__50834","iter__50832","cljs.core.conj","s__50841","b__50843","i__50842","iter__50840","hpointu.rts.app/init-state","hpointu.rts.app/world-width","world","cljs.core.get","hpointu.rts.app/world-height","p__50852","vec__50853","cljs.core.nth","hpointu.rts.app/to-screen","x","y","p__50856","vec__50857","hpointu.rts.app/to-world","hpointu.rts.app/get-canvas","js/document.getElementById","hpointu.rts.app/obstacle?","obstacles","G__50860","cljs.core.get_in","hpointu.rts.app/draw-tile!","ctx","size","hover?","vec__50861","tile-color","hpointu.rts.graphics/render-item!","p__50868","map__50869","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","hpointu.rts.app/draw-map!","hover","state","seq__50875","chunk__50880","count__50881","i__50882","seq__50883","chunk__50884","count__50885","i__50886","c__4556__auto__","cljs.core/chunk-first","cljs.core/next","seq__50876","chunk__50877","count__50878","i__50879","cljs.core._EQ_","hpointu.rts.app/update-state","dt","canvas","cljs.core.assoc","cljs.core.map","cljs.core/int","hpointu.rts.input/mouse-pos","hpointu.rts.app/draw!","hpointu.rts.app/tick!","t","js/Date","cljs.core/deref","new-state","cljs.core/reset!","hpointu.rts.app/stop","cljs.core.println","hpointu.rts.app/start","hpointu.rts.app/init","js/setInterval","hpointu.rts.input/init!"],"sourcesContent":["(ns hpointu.rts.app\n  (:require [hpointu.rts.graphics :as g]\n            [hpointu.rts.input :as io]\n            [hpointu.rts.core :as core]))\n\n(def current-time (atom 0))\n(defonce state (atom {}))\n\n(def SIZE 35)\n\n(defn ->world [width height]\n  (let [full (vec (for [_ (range width)] :w))\n        line (-> [:w]\n                 (into (for [_ (range (- width 2))] :g))\n                 (conj :w))]\n    (-> [full]\n        (into (for [_ (range (- height 2))] line))\n        (conj full)))) \n\n(defn init-state []\n  {:world (->world 15 10)})\n\n(defn world-width [world]\n  (count (get world 0)))\n\n(defn world-height [world]\n  (count world))\n\n(defn to-screen [[x y]]\n  [(* SIZE x) (* SIZE y)])\n\n(defn to-world [[x y]]\n  [(/ x SIZE) (/ y SIZE)])\n\n(defn get-canvas []\n  (js/document.getElementById \"game\"))\n\n(defn obstacle? [world x y]\n  (let [obstacles #{:w}]\n    (some? (obstacles (get-in world [y x])))))\n\n(defn draw-tile! [ctx world x y size hover?]\n  (let [tile-color (if (obstacle? world x y) \"gray\" (if hover? \"green\" \"#222\"))\n        [x y] (to-screen [x y])]\n    (g/render-item! ctx {:type :rect :x (+ 1 x) :y (+ 1 y)\n                         :w (- size 2) :h (- size 2) :fill tile-color})\n    (g/render-item! ctx {:type :rect :x (+ 2 x) :y (+ 2 y)\n                         :w (- size 4) :h (- size 4) :fill \"black\"})))\n\n(defn draw-map! [ctx {:keys [world hover] :as state}]\n  (doseq [x (range (world-width world))\n          y (range (world-height world))]\n    (draw-tile! ctx world x y SIZE (= hover [x y])))) \n\n(defn update-state [state dt] state\n  (let [canvas (get-canvas)]\n    (assoc state :hover (into [] (map int (to-world (io/mouse-pos canvas)))))))\n \n(defn draw! [state]\n  (let [canvas (get-canvas)\n        ctx (. canvas getContext \"2d\")]\n    (.clearRect ctx 0 0 (.-width canvas) (.-height canvas))\n    (draw-map! ctx state)))\n\n(defn tick! []\n  (let [t (.now js/Date)\n        dt (- t @current-time)\n        new-state (update-state @state dt)]\n    (do (reset! current-time t)\n        (draw! new-state)\n        (reset! state new-state))))\n\n(defn ^:dev/before-load stop []\n  (println \"Stopping...\"))\n\n(defn ^:dev/after-load start []\n  (println (str \"Starting...\")))\n\n(defn ^:export init []\n  (println \"Initializing...\")\n  (js/setInterval tick! 20)\n  (reset! state (init-state))\n  (io/init!)\n  (start))\n"]}