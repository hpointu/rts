{"version":3,"sources":["hpointu/rts/app_test.cljs"],"mappings":"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","names":["cljs.test/test-var","hpointu.rts.app-test/test-obstacles","world","values__9192__auto__","cljs.core/List","result__9193__auto__","cljs.core.apply","cljs.test/report","cljs.core/cons","t__9229__auto__","e46479","hpointu.rts.core/obstacle?","e46480","cljs.core/not","hpointu.rts.app-test/test-world-dimensions","e46481","cljs.core/=","hpointu.rts.core/world-width","e46482","hpointu.rts.core/world-height","hpointu.rts.app-test/world-template","e46483","hpointu.rts.core/->world","hpointu.rts.app-test/in-world","e46484","hpointu.rts.core/in-world?","hpointu.rts.app-test/change-world-value","e46485","hpointu.rts.core/set-world-cell"],"sourcesContent":["(ns hpointu.rts.app-test\n  (:require [cljs.test :refer [deftest is]]\n            [hpointu.rts.core :as core]))\n\n(deftest test-obstacles\n  (let [world [[:g :g :g :g]\n               [:g :g :g :w]]]  ; wall (3, 1)\n    (is (core/obstacle? world 3 1))\n    (is (not (core/obstacle? world 1 1)))))\n\n(deftest test-world-dimensions\n  (let [world [[:w :w :w]\n               [:w :w :w]]]\n    (is (= 3 (core/world-width world)))\n    (is (= 2 (core/world-height world)))))\n\n(deftest world-template\n  (is (= (core/->world 4 3)\n         [[:w :w :w :w]\n          [:w :g :g :w]\n          [:w :w :w :w]])))\n\n(deftest in-world\n  (is (core/in-world? (core/->world 4 3) 2 2)))\n\n(deftest change-world-value\n  (is (= (core/set-world-cell (core/->world 2 2) 1 0 :x)\n         [[:w :x]\n          [:w :w]])))\n"]}