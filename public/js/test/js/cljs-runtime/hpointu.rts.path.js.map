{"version":3,"sources":["hpointu/rts/path.cljs"],"mappings":"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","names":["p__48277","vec__48278","cljs.core.nth","hpointu.rts.path/get-cost","world","x","y","hpointu.rts.core/obstacle?","p__48281","p__48282","vec__48283","vec__48286","hpointu.rts.path/manhattan-dist","x1","y1","x2","y2","js/Math.abs","hpointu.rts.path/path","begin","end","hpointu.rts.path/reconstruct","came-from","current","total","cljs.core.get","cljs.core.conj","cljs.core.into","cljs.core/reverse","hpointu.rts.path/score","m","k","hpointu.rts.path/h","n","hpointu.rts.core/distance","hpointu.rts.path/neighbour-reducer","p__48289","map__48290","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","g-score","open","acc","neighbour","tmp-score","hpointu.rts.core/cost","cljs.core.assoc","closed","tailrecursion.priority_map.priority_map","cljs.core/empty?","vec__48300","seq__48301","cljs.core/seq","first__48302","cljs.core/first","cljs.core/next","vec__48303","pos","_","cljs.core/pop","cljs.core._EQ_","map__48306","neighbours","cljs.core.remove","hpointu.rts.core/neighbours","cljs.core.reduce"],"sourcesContent":["(ns hpointu.rts.path\n  (:require [tailrecursion.priority-map :refer [priority-map]]\n            [hpointu.rts.core :as core]))\n\n(defn get-cost [world [x y]]\n  (if (core/obstacle? world x y) 999 0))\n\n(defn manhattan-dist [[x1 y1] [x2 y2]]\n  (+ (js/Math.abs (- x2 x1))\n     (js/Math.abs (- y2 y1))))\n\n(defn path [world begin end]\n  ;; Straight from wikipedia :D\n\n  (defn reconstruct [came-from current total]\n    (let [current (get came-from current)]\n      (if current\n        (recur came-from current (conj total current))\n        (into [] (reverse total)))))\n\n  (defn score [m k]\n    (get m k 9999999))\n\n  (defn h [n]\n    (core/distance n end))\n\n  (defn neighbour-reducer [current]\n    (fn [{:keys [came-from g-score open] :as acc} neighbour] \n      (let [tmp-score (+ (score g-score current)\n                         (core/cost world current neighbour))] \n        (if (>= tmp-score (score g-score neighbour))\n          acc\n          {:came-from (assoc came-from neighbour current)\n           :g-score (assoc g-score neighbour tmp-score)\n           :open (assoc open neighbour (+ tmp-score\n                                          (h neighbour)))}))))\n\n  (loop [closed #{}\n         open (priority-map begin (h begin))\n         came-from {}\n         g-score {begin 0}]\n    (if (empty? open)\n      nil\n      (let [[[pos _] & _] open\n            open (pop open)]\n        (if (= pos end)\n          (reconstruct came-from pos [pos])\n          (let [closed (conj closed pos)\n                neighbours (remove closed (core/neighbours world pos))\n                {:keys [came-from g-score open] :as acc}\n                (reduce (neighbour-reducer pos)\n                        {:came-from came-from\n                         :g-score g-score\n                         :open open}\n                        neighbours)]\n            (recur closed open came-from g-score)))))))\n"]}