{"version":3,"sources":["tailrecursion/priority_map.cljs"],"mappings":"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","names":["self__","args27071","cljs.core/aclone","this__4369__auto__","writer__4370__auto__","opt__4371__auto__","cljs.core/-write","tailrecursion.priority-map/PersistentPriorityMap","tailrecursion.priority-map/->PersistentPriorityMap","priority->set-of-items","item->priority","meta","keyfn","__hash","coll","writer","opts","pr-pair","keyval","cljs.core/pr-sequential-writer","cljs.core/pr-writer","this","entry","cljs.core/vector?","cljs.core/-nth","cljs.core.reduce","cljs.core/-conj","cljs.core/with-meta","other","cljs.core/-equiv","h__4238__auto__","cljs.core/hash-unordered-coll","cljs.core/seq","iter__4529__auto__","s__27106","cljs.core/LazySeq","temp__5735__auto__","xs__6292__auto__","vec__27111","cljs.core/first","cljs.core.nth","iterys__4525__auto__","s__27108","cljs.core/chunked-seq?","c__4527__auto__","size__4528__auto__","cljs.core/count","b__27110","cljs.core/chunk-buffer","i__27109","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__27107","cljs.core/chunk-rest","cljs.core/cons","cljs.core/rest","fs__4526__auto__","cljs.core.concat","iter__27105","priority","item-set","item","s__27115","vec__27120","s__27117","b__27119","i__27118","iter__27116","iter__27114","s__27088","vec__27093","s__27090","b__27092","i__27091","iter__27089","iter__27087","cljs.core/rseq","s__27097","vec__27102","s__27099","b__27101","i__27100","iter__27098","iter__27096","cljs.core.get","not-found","f","cljs.core/val","cljs.core/key","js/Error","priority-key","cljs.core._EQ_","cljs.core.dissoc","cljs.core.assoc","cljs.core.disj","temp__5733__auto__","current-priority","current-priority-key","cljs.core.conj","cljs.core/contains?","ascending?","fexpr__27123","k","sets","cljs.core.subseq","cljs.core/>=","cljs.core.rsubseq","cljs.core/<=","s__27125","vec__27130","s__27127","b__27129","i__27128","iter__27126","iter__27124","s__27134","vec__27139","s__27136","b__27138","i__27137","iter__27135","iter__27133","G__27142","cljs.core/compare","cljs.core/sorted-map","cljs.core/identity","tailrecursion.priority-map/pm-empty-by","comparator","cljs.core/sorted-map-by","var_args","G__27144","tailrecursion.priority-map/pm-empty-keyfn","tailrecursion.priority-map/read-priority-map","elems","cljs.core/map?","cljs.core.into","cljs.reader/register-tag-parser!","args__4742__auto__","len__4736__auto__","i__4737__auto__","argseq__4743__auto__","cljs.core/IndexedSeq","tailrecursion.priority-map/priority-map","seq27145","self__4724__auto__","keyvals","in","out","cljs.core/nnext","cljs.core/second","tailrecursion.priority-map/priority-map-by","seq27146","G__27147","cljs.core/next","self__4723__auto__","tailrecursion.priority-map/priority-map-keyfn","seq27148","G__27149","tailrecursion.priority_map.pm_empty_keyfn","tailrecursion.priority-map/priority-map-keyfn-by","seq27150","G__27151","G__27152","cljs.core/chunk-first"],"sourcesContent":["(ns tailrecursion.priority-map\n  (:require [cljs.core :as core])\n  (:use [cljs.reader :only [register-tag-parser!]])\n  (:require-macros [cljs.core :as coreclj]))\n\n(deftype PersistentPriorityMap [priority->set-of-items item->priority meta keyfn ^:mutable __hash]\n  IPrintWithWriter\n  (-pr-writer [coll writer opts]\n    (let [pr-pair (fn [keyval] (pr-sequential-writer writer pr-writer \"\" \" \" \"\" opts keyval))]\n      (pr-sequential-writer writer pr-pair \"#tailrecursion.priority-map {\" \", \" \"}\" opts coll)))\n\n  IWithMeta\n  (-with-meta [this meta]\n    (PersistentPriorityMap. priority->set-of-items item->priority meta keyfn __hash))\n\n  IMeta\n  (-meta [this] meta)\n\n  ICollection\n  (-conj [this entry]\n    (if (vector? entry)\n      (-assoc this (-nth entry 0) (-nth entry 1))\n      (reduce -conj this entry)))\n\n  IEmptyableCollection\n  (-empty [this] (with-meta\n                   tailrecursion.priority-map.PersistentPriorityMap.EMPTY\n                   meta))\n\n  IEquiv\n  (-equiv [this other]\n    (-equiv item->priority other))\n\n  IHash\n  (-hash [this]\n    (coreclj/caching-hash this core/hash-unordered-coll __hash))\n\n  ISeqable\n  (-seq [this]\n    (if keyfn\n      (seq (for [[priority item-set] priority->set-of-items, item item-set]\n             [item (item->priority item)]))\n      (seq (for [[priority item-set] priority->set-of-items, item item-set]\n             [item priority]))))\n\n  IReversible\n  (-rseq [coll]\n    (if keyfn\n      (seq (for [[priority item-set] (rseq priority->set-of-items), item item-set]\n             [item (item->priority item)]))\n      (seq (for [[priority item-set] (rseq priority->set-of-items), item item-set]\n             [item priority]))))\n\n  ICounted\n  (-count [this]\n    (count item->priority))\n\n  ILookup\n  (-lookup [this item]\n    (get item->priority item))\n  (-lookup [coll item not-found]\n    (get item->priority item not-found))\n\n  IStack\n  (-peek [this]\n    (when-not (zero? (count item->priority))\n      (let [f (first priority->set-of-items)\n            item (first (val f))]\n        (if keyfn\n          [item (item->priority item)]\n          [item (key f)]))))\n  (-pop [this]\n    (if (zero? (count item->priority))\n      (throw (js/Error. \"Can't pop empty priority map\"))\n      (let [f (first priority->set-of-items)\n            item-set (val f)\n            item (first item-set)\n            priority-key (key f)]\n        (if (= (count item-set) 1)\n          (PersistentPriorityMap.\n           (dissoc priority->set-of-items priority-key)\n           (dissoc item->priority item)\n           meta\n           keyfn\n           nil)\n          (PersistentPriorityMap.\n           (assoc priority->set-of-items priority-key (disj item-set item)),\n           (dissoc item->priority item)\n           meta\n           keyfn\n           nil)))))\n\n  IAssociative\n  (-assoc [this item priority]\n    (if-let [current-priority (get item->priority item nil)]\n      (if (= current-priority priority)\n        this\n        (let [priority-key (keyfn priority)\n              current-priority-key (keyfn current-priority)\n              item-set (get priority->set-of-items current-priority-key)]\n          (if (= (count item-set) 1)\n            (PersistentPriorityMap.\n             (assoc (dissoc priority->set-of-items current-priority-key)\n               priority-key (conj (get priority->set-of-items priority-key #{}) item))\n             (assoc item->priority item priority)\n             meta\n             keyfn\n             nil)\n            (PersistentPriorityMap.\n             (assoc priority->set-of-items\n                    current-priority-key (disj (get priority->set-of-items current-priority-key) item)\n                    priority-key (conj (get priority->set-of-items priority-key #{}) item))\n             (assoc item->priority item priority)\n             meta\n             keyfn\n             nil))))\n      (let [priority-key (keyfn priority)]\n        (PersistentPriorityMap.\n         (assoc priority->set-of-items\n           priority-key (conj (get priority->set-of-items priority-key #{}) item))\n         (assoc item->priority item priority)\n         meta\n         keyfn\n         nil))))\n\n  (-contains-key? [this item]\n    (contains? item->priority item))\n\n  IMap\n  (-dissoc [this item]\n    (let [priority (item->priority item ::not-found)]\n      (if (= priority ::not-found)\n        this\n        (let [priority-key (keyfn priority)\n              item-set (priority->set-of-items priority-key)]\n          (if (= (count item-set) 1)\n            (PersistentPriorityMap.\n             (dissoc priority->set-of-items priority-key)\n             (dissoc item->priority item)\n             meta\n             keyfn\n             nil)\n            (PersistentPriorityMap.\n             (assoc priority->set-of-items priority-key (disj item-set item)),\n             (dissoc item->priority item)\n             meta\n             keyfn\n             nil))))))\n\n  ISorted\n  (-sorted-seq [this ascending?]\n    ((if ascending? seq rseq) this))\n  (-sorted-seq-from [this k ascending?]\n    (let [sets (if ascending?\n                 (subseq priority->set-of-items >= k)\n                 (rsubseq priority->set-of-items <= k))]\n      (if keyfn\n        (seq (for [[priority item-set] sets, item item-set]\n               [item (item->priority item)]))\n        (seq (for [[priority item-set] sets, item item-set]\n               [item priority])))))\n  (-entry-key [this entry]\n    (keyfn (val entry)))\n  (-comparator [this] compare)\n\n  IFn\n  (-invoke [this item]\n    (-lookup this item))\n  (-invoke [this item not-found]\n    (-lookup this item not-found)))\n\n(set! tailrecursion.priority-map.PersistentPriorityMap.EMPTY\n      (PersistentPriorityMap. (sorted-map) {} {} identity nil))\n\n(defn- pm-empty-by [comparator]\n  (PersistentPriorityMap. (sorted-map-by comparator) {} {} identity nil))\n\n(defn- pm-empty-keyfn\n  ([keyfn] (PersistentPriorityMap. (sorted-map) {} {} keyfn nil))\n  ([keyfn comparator] (PersistentPriorityMap. (sorted-map-by comparator) {} {} keyfn nil)))\n\n(defn- read-priority-map [elems]\n  (if (map? elems)\n    (into tailrecursion.priority-map.PersistentPriorityMap.EMPTY elems)\n    (throw (js/Error \"Priority map literal expects a map for its elements.\"))))\n\n(register-tag-parser! \"tailrecursion.priority-map\" read-priority-map)\n\n(defn priority-map\n  \"keyval => key val\n  Returns a new priority map with supplied mappings.\"\n  ([& keyvals]\n     (loop [in (seq keyvals) out tailrecursion.priority-map.PersistentPriorityMap.EMPTY]\n       (if in\n         (recur (nnext in) (assoc out (first in) (second in)))\n         out))))\n\n(defn priority-map-by\n  \"keyval => key val\n  Returns a new priority map with supplied\n  mappings, using the supplied comparator.\"\n  ([comparator & keyvals]\n     (loop [in (seq keyvals) out (pm-empty-by comparator)]\n       (if in\n         (recur (nnext in) (assoc out (first in) (second in)))\n         out))))\n\n(defn priority-map-keyfn\n  \"keyval => key val\n  Returns a new priority map with supplied\n  mappings, using the supplied keyfn.\"\n  ([keyfn & keyvals]\n     (loop [in (seq keyvals) out (pm-empty-keyfn keyfn)]\n       (if in\n         (recur (nnext in) (assoc out (first in) (second in)))\n         out))))\n\n(defn priority-map-keyfn-by\n  \"keyval => key val\n  Returns a new priority map with supplied\n  mappings, using the supplied keyfn and comparator.\"\n  ([keyfn comparator & keyvals]\n     (loop [in (seq keyvals) out (pm-empty-keyfn keyfn comparator)]\n       (if in\n         (recur (nnext in) (assoc out (first in) (second in)))\n         out))))\n"]}